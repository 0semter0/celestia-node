// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/celestiaorg/celestia-node/nodebuilder/blobstream (interfaces: Module)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	blobstream "github.com/celestiaorg/celestia-node/nodebuilder/blobstream"
	share "github.com/celestiaorg/celestia-node/share"
	gomock "github.com/golang/mock/gomock"
	types "github.com/tendermint/tendermint/types"
)

// MockModule is a mock of Module interface.
type MockModule struct {
	ctrl     *gomock.Controller
	recorder *MockModuleMockRecorder
}

// MockModuleMockRecorder is the mock recorder for MockModule.
type MockModuleMockRecorder struct {
	mock *MockModule
}

// NewMockModule creates a new mock instance.
func NewMockModule(ctrl *gomock.Controller) *MockModule {
	mock := &MockModule{ctrl: ctrl}
	mock.recorder = &MockModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModule) EXPECT() *MockModuleMockRecorder {
	return m.recorder
}

// GetDataCommitment mocks base method.
func (m *MockModule) GetDataCommitment(arg0 context.Context, arg1, arg2 uint64) (*blobstream.DataCommitment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataCommitment", arg0, arg1, arg2)
	ret0, _ := ret[0].(*blobstream.DataCommitment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataCommitment indicates an expected call of GetDataCommitment.
func (mr *MockModuleMockRecorder) GetDataCommitment(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataCommitment", reflect.TypeOf((*MockModule)(nil).GetDataCommitment), arg0, arg1, arg2)
}

// GetDataRootInclusionProof mocks base method.
func (m *MockModule) GetDataRootInclusionProof(arg0 context.Context, arg1 int64, arg2, arg3 uint64) (*blobstream.DataRootTupleInclusionProof, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataRootInclusionProof", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*blobstream.DataRootTupleInclusionProof)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataRootInclusionProof indicates an expected call of GetDataRootInclusionProof.
func (mr *MockModuleMockRecorder) GetDataRootInclusionProof(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataRootInclusionProof", reflect.TypeOf((*MockModule)(nil).GetDataRootInclusionProof), arg0, arg1, arg2, arg3)
}

// ProveCommitment mocks base method.
func (m *MockModule) ProveCommitment(arg0 context.Context, arg1 uint64, arg2 share.Namespace, arg3 []byte) (*blobstream.CommitmentProof, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProveCommitment", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*blobstream.CommitmentProof)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProveCommitment indicates an expected call of ProveCommitment.
func (mr *MockModuleMockRecorder) ProveCommitment(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProveCommitment", reflect.TypeOf((*MockModule)(nil).ProveCommitment), arg0, arg1, arg2, arg3)
}

// ProveShares mocks base method.
func (m *MockModule) ProveShares(arg0 context.Context, arg1, arg2, arg3 uint64) (*types.ShareProof, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProveShares", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*types.ShareProof)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProveShares indicates an expected call of ProveShares.
func (mr *MockModuleMockRecorder) ProveShares(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProveShares", reflect.TypeOf((*MockModule)(nil).ProveShares), arg0, arg1, arg2, arg3)
}
