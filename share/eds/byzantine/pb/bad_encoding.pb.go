// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: share/eds/byzantine/pb/bad_encoding.proto

package share_eds_byzantine_pb

import (
	fmt "fmt"
	pb "github.com/celestiaorg/celestia-node/share/pb"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BadEncoding struct {
	HeaderHash []byte               `protobuf:"bytes,1,opt,name=HeaderHash,proto3" json:"HeaderHash,omitempty"`
	Height     uint64               `protobuf:"varint,2,opt,name=Height,proto3" json:"Height,omitempty"`
	Shares     []*pb.ShareWithProof `protobuf:"bytes,3,rep,name=Shares,proto3" json:"Shares,omitempty"`
	Index      uint32               `protobuf:"varint,4,opt,name=Index,proto3" json:"Index,omitempty"`
	Axis       pb.AxisType          `protobuf:"varint,5,opt,name=Axis,proto3,enum=AxisType" json:"Axis,omitempty"`
}

func (m *BadEncoding) Reset()         { *m = BadEncoding{} }
func (m *BadEncoding) String() string { return proto.CompactTextString(m) }
func (*BadEncoding) ProtoMessage()    {}
func (*BadEncoding) Descriptor() ([]byte, []int) {
	return fileDescriptor_214a5a696a6c99d9, []int{0}
}
func (m *BadEncoding) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BadEncoding) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BadEncoding.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BadEncoding) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BadEncoding.Merge(m, src)
}
func (m *BadEncoding) XXX_Size() int {
	return m.Size()
}
func (m *BadEncoding) XXX_DiscardUnknown() {
	xxx_messageInfo_BadEncoding.DiscardUnknown(m)
}

var xxx_messageInfo_BadEncoding proto.InternalMessageInfo

func (m *BadEncoding) GetHeaderHash() []byte {
	if m != nil {
		return m.HeaderHash
	}
	return nil
}

func (m *BadEncoding) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *BadEncoding) GetShares() []*pb.ShareWithProof {
	if m != nil {
		return m.Shares
	}
	return nil
}

func (m *BadEncoding) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *BadEncoding) GetAxis() pb.AxisType {
	if m != nil {
		return m.Axis
	}
	return pb.AxisType_ROW
}

func init() {
	proto.RegisterType((*BadEncoding)(nil), "share.eds.byzantine.pb.BadEncoding")
}

func init() {
	proto.RegisterFile("share/eds/byzantine/pb/bad_encoding.proto", fileDescriptor_214a5a696a6c99d9)
}

var fileDescriptor_214a5a696a6c99d9 = []byte{
	// 249 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x8f, 0x4d, 0x4a, 0xc4, 0x30,
	0x14, 0x80, 0x1b, 0xa7, 0x53, 0x30, 0xf5, 0x07, 0x82, 0x0c, 0x41, 0x30, 0x14, 0x37, 0xd6, 0x4d,
	0x0a, 0xe3, 0x09, 0x1c, 0x10, 0xea, 0x4e, 0xa2, 0xe0, 0x52, 0x12, 0xf3, 0x9c, 0x66, 0x93, 0x84,
	0x26, 0x8b, 0xa9, 0xa7, 0xf0, 0x0e, 0x5e, 0xc6, 0xe5, 0x2c, 0x5d, 0x4a, 0x7b, 0x11, 0x99, 0x4e,
	0x11, 0x97, 0xdf, 0xf7, 0xbe, 0xc7, 0xe3, 0xe1, 0xeb, 0xd0, 0xc8, 0x16, 0x2a, 0xd0, 0xa1, 0x52,
	0xdd, 0xbb, 0xb4, 0xd1, 0x58, 0xa8, 0xbc, 0xaa, 0x94, 0xd4, 0x2f, 0x60, 0x5f, 0x9d, 0x36, 0x76,
	0xcd, 0x7d, 0xeb, 0xa2, 0x23, 0x8b, 0x31, 0xe5, 0xa0, 0x03, 0xff, 0x4b, 0xb9, 0x57, 0xe7, 0x79,
	0xec, 0x3c, 0x84, 0x7d, 0x74, 0xf9, 0x89, 0x70, 0xbe, 0x92, 0xfa, 0x6e, 0x5a, 0x25, 0x0c, 0xe3,
	0x1a, 0xa4, 0x86, 0xb6, 0x96, 0xa1, 0xa1, 0xa8, 0x40, 0xe5, 0x91, 0xf8, 0x67, 0xc8, 0x02, 0x67,
	0x35, 0x98, 0x75, 0x13, 0xe9, 0x41, 0x81, 0xca, 0x54, 0x4c, 0x44, 0xae, 0x70, 0xf6, 0xb8, 0x3b,
	0x17, 0xe8, 0xac, 0x98, 0x95, 0xf9, 0xf2, 0x94, 0x8f, 0xf8, 0x6c, 0x62, 0xf3, 0xd0, 0x3a, 0xf7,
	0x26, 0xa6, 0x31, 0x39, 0xc3, 0xf3, 0x7b, 0xab, 0x61, 0x43, 0xd3, 0x02, 0x95, 0xc7, 0x62, 0x0f,
	0xe4, 0x02, 0xa7, 0xb7, 0x1b, 0x13, 0xe8, 0xbc, 0x40, 0xe5, 0xc9, 0xf2, 0x90, 0xef, 0xe0, 0xa9,
	0xf3, 0x20, 0x46, 0xbd, 0xa2, 0x5f, 0x3d, 0x43, 0xdb, 0x9e, 0xa1, 0x9f, 0x9e, 0xa1, 0x8f, 0x81,
	0x25, 0xdb, 0x81, 0x25, 0xdf, 0x03, 0x4b, 0x54, 0x36, 0xbe, 0x71, 0xf3, 0x1b, 0x00, 0x00, 0xff,
	0xff, 0xb6, 0x2d, 0x9d, 0x09, 0x18, 0x01, 0x00, 0x00,
}

func (m *BadEncoding) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BadEncoding) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BadEncoding) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Axis != 0 {
		i = encodeVarintBadEncoding(dAtA, i, uint64(m.Axis))
		i--
		dAtA[i] = 0x28
	}
	if m.Index != 0 {
		i = encodeVarintBadEncoding(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Shares) > 0 {
		for iNdEx := len(m.Shares) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Shares[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBadEncoding(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Height != 0 {
		i = encodeVarintBadEncoding(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if len(m.HeaderHash) > 0 {
		i -= len(m.HeaderHash)
		copy(dAtA[i:], m.HeaderHash)
		i = encodeVarintBadEncoding(dAtA, i, uint64(len(m.HeaderHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBadEncoding(dAtA []byte, offset int, v uint64) int {
	offset -= sovBadEncoding(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BadEncoding) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.HeaderHash)
	if l > 0 {
		n += 1 + l + sovBadEncoding(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovBadEncoding(uint64(m.Height))
	}
	if len(m.Shares) > 0 {
		for _, e := range m.Shares {
			l = e.Size()
			n += 1 + l + sovBadEncoding(uint64(l))
		}
	}
	if m.Index != 0 {
		n += 1 + sovBadEncoding(uint64(m.Index))
	}
	if m.Axis != 0 {
		n += 1 + sovBadEncoding(uint64(m.Axis))
	}
	return n
}

func sovBadEncoding(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBadEncoding(x uint64) (n int) {
	return sovBadEncoding(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BadEncoding) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBadEncoding
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BadEncoding: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BadEncoding: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeaderHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBadEncoding
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBadEncoding
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBadEncoding
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeaderHash = append(m.HeaderHash[:0], dAtA[iNdEx:postIndex]...)
			if m.HeaderHash == nil {
				m.HeaderHash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBadEncoding
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBadEncoding
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBadEncoding
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBadEncoding
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Shares = append(m.Shares, &pb.ShareWithProof{})
			if err := m.Shares[len(m.Shares)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBadEncoding
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Axis", wireType)
			}
			m.Axis = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBadEncoding
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Axis |= pb.AxisType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBadEncoding(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBadEncoding
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBadEncoding(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBadEncoding
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBadEncoding
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBadEncoding
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBadEncoding
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBadEncoding
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBadEncoding
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBadEncoding        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBadEncoding          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBadEncoding = fmt.Errorf("proto: unexpected end of group")
)
