// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: share/ipldv2/pb/ipldv2pb.proto

package ipldv2pb

import (
	fmt "fmt"
	pb "github.com/celestiaorg/nmt/pb"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Axis int32

const (
	Axis_Row Axis = 0
	Axis_Col Axis = 1
)

var Axis_name = map[int32]string{
	0: "Row",
	1: "Col",
}

var Axis_value = map[string]int32{
	"Row": 0,
	"Col": 1,
}

func (x Axis) String() string {
	return proto.EnumName(Axis_name, int32(x))
}

func (Axis) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cb41c3a4f982a271, []int{0}
}

type SampleType int32

const (
	SampleType_Data   SampleType = 0
	SampleType_Parity SampleType = 1
)

var SampleType_name = map[int32]string{
	0: "Data",
	1: "Parity",
}

var SampleType_value = map[string]int32{
	"Data":   0,
	"Parity": 1,
}

func (x SampleType) String() string {
	return proto.EnumName(SampleType_name, int32(x))
}

func (SampleType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cb41c3a4f982a271, []int{1}
}

type SampleID struct {
	DataRoot []byte `protobuf:"bytes,1,opt,name=data_root,json=dataRoot,proto3" json:"data_root,omitempty"`
	DahRoot  []byte `protobuf:"bytes,2,opt,name=dah_root,json=dahRoot,proto3" json:"dah_root,omitempty"`
	Index    uint32 `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	Axis     Axis   `protobuf:"varint,4,opt,name=axis,proto3,enum=Axis" json:"axis,omitempty"`
}

func (m *SampleID) Reset()         { *m = SampleID{} }
func (m *SampleID) String() string { return proto.CompactTextString(m) }
func (*SampleID) ProtoMessage()    {}
func (*SampleID) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb41c3a4f982a271, []int{0}
}
func (m *SampleID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SampleID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SampleID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SampleID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SampleID.Merge(m, src)
}
func (m *SampleID) XXX_Size() int {
	return m.Size()
}
func (m *SampleID) XXX_DiscardUnknown() {
	xxx_messageInfo_SampleID.DiscardUnknown(m)
}

var xxx_messageInfo_SampleID proto.InternalMessageInfo

func (m *SampleID) GetDataRoot() []byte {
	if m != nil {
		return m.DataRoot
	}
	return nil
}

func (m *SampleID) GetDahRoot() []byte {
	if m != nil {
		return m.DahRoot
	}
	return nil
}

func (m *SampleID) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *SampleID) GetAxis() Axis {
	if m != nil {
		return m.Axis
	}
	return Axis_Row
}

type Sample struct {
	Id    *SampleID  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type  SampleType `protobuf:"varint,2,opt,name=type,proto3,enum=SampleType" json:"type,omitempty"`
	Share []byte     `protobuf:"bytes,3,opt,name=share,proto3" json:"share,omitempty"`
	Proof *pb.Proof  `protobuf:"bytes,4,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (m *Sample) Reset()         { *m = Sample{} }
func (m *Sample) String() string { return proto.CompactTextString(m) }
func (*Sample) ProtoMessage()    {}
func (*Sample) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb41c3a4f982a271, []int{1}
}
func (m *Sample) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Sample) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Sample.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Sample) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sample.Merge(m, src)
}
func (m *Sample) XXX_Size() int {
	return m.Size()
}
func (m *Sample) XXX_DiscardUnknown() {
	xxx_messageInfo_Sample.DiscardUnknown(m)
}

var xxx_messageInfo_Sample proto.InternalMessageInfo

func (m *Sample) GetId() *SampleID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Sample) GetType() SampleType {
	if m != nil {
		return m.Type
	}
	return SampleType_Data
}

func (m *Sample) GetShare() []byte {
	if m != nil {
		return m.Share
	}
	return nil
}

func (m *Sample) GetProof() *pb.Proof {
	if m != nil {
		return m.Proof
	}
	return nil
}

func init() {
	proto.RegisterEnum("Axis", Axis_name, Axis_value)
	proto.RegisterEnum("SampleType", SampleType_name, SampleType_value)
	proto.RegisterType((*SampleID)(nil), "SampleID")
	proto.RegisterType((*Sample)(nil), "Sample")
}

func init() { proto.RegisterFile("share/ipldv2/pb/ipldv2pb.proto", fileDescriptor_cb41c3a4f982a271) }

var fileDescriptor_cb41c3a4f982a271 = []byte{
	// 305 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x90, 0xc1, 0x4a, 0xc3, 0x30,
	0x1c, 0xc6, 0x9b, 0xad, 0xdb, 0xba, 0xff, 0xe6, 0x2c, 0xc1, 0x43, 0xa7, 0x10, 0xc7, 0x40, 0x28,
	0x3b, 0xb4, 0x50, 0x9f, 0x40, 0xdd, 0xc5, 0xdb, 0x88, 0xde, 0x25, 0x25, 0x95, 0x06, 0xaa, 0x09,
	0x6d, 0xd0, 0xf6, 0xe8, 0x1b, 0xf8, 0x58, 0x1e, 0x77, 0xf4, 0x28, 0xed, 0x8b, 0x48, 0x93, 0x8a,
	0xb7, 0xef, 0xcb, 0xef, 0xf0, 0xfb, 0x7f, 0x01, 0x52, 0xe5, 0xac, 0xcc, 0x62, 0xa1, 0x0a, 0xfe,
	0x96, 0xc4, 0x2a, 0x1d, 0x92, 0x4a, 0x23, 0x55, 0x4a, 0x2d, 0xcf, 0x57, 0x2a, 0x8d, 0x55, 0x29,
	0xe5, 0xb3, 0xed, 0xdb, 0x0a, 0xbc, 0x07, 0xf6, 0xa2, 0x8a, 0xec, 0x7e, 0x8f, 0x2f, 0x60, 0xce,
	0x99, 0x66, 0x4f, 0xa5, 0x94, 0x3a, 0x40, 0x1b, 0x14, 0x2e, 0xa9, 0xd7, 0x3f, 0x50, 0x29, 0x35,
	0x5e, 0x83, 0xc7, 0x59, 0x6e, 0xd9, 0xc8, 0xb0, 0x19, 0x67, 0xb9, 0x41, 0x67, 0x30, 0x11, 0xaf,
	0x3c, 0xab, 0x83, 0xf1, 0x06, 0x85, 0x27, 0xd4, 0x16, 0xbc, 0x06, 0x97, 0xd5, 0xa2, 0x0a, 0xdc,
	0x0d, 0x0a, 0x57, 0xc9, 0x24, 0xba, 0xa9, 0x45, 0x45, 0xcd, 0xd3, 0xf6, 0x03, 0xc1, 0xd4, 0x5a,
	0xf1, 0x1a, 0x46, 0x82, 0x1b, 0xd9, 0x22, 0x99, 0x47, 0x7f, 0xa7, 0xd0, 0x91, 0xe0, 0xf8, 0x12,
	0x5c, 0xdd, 0xa8, 0xcc, 0xd8, 0x56, 0xc9, 0x62, 0x80, 0x8f, 0x8d, 0xca, 0xa8, 0x01, 0xbd, 0xd7,
	0xac, 0x35, 0xde, 0x25, 0xb5, 0x05, 0x5f, 0xc1, 0xc4, 0x0c, 0x34, 0xe2, 0x45, 0x72, 0x1a, 0x0d,
	0x73, 0xd3, 0xe8, 0xd0, 0x07, 0x6a, 0xe9, 0x2e, 0x00, 0xb7, 0xbf, 0x08, 0xcf, 0x60, 0x4c, 0xe5,
	0xbb, 0xef, 0xf4, 0xe1, 0x4e, 0x16, 0x3e, 0xda, 0x6d, 0x01, 0xfe, 0x55, 0xd8, 0x03, 0x77, 0xcf,
	0x34, 0xf3, 0x1d, 0x0c, 0x30, 0x3d, 0xb0, 0x52, 0xe8, 0xc6, 0x47, 0xb7, 0xc1, 0x57, 0x4b, 0xd0,
	0xb1, 0x25, 0xe8, 0xa7, 0x25, 0xe8, 0xb3, 0x23, 0xce, 0xb1, 0x23, 0xce, 0x77, 0x47, 0x9c, 0x74,
	0x6a, 0xfe, 0xf5, 0xfa, 0x37, 0x00, 0x00, 0xff, 0xff, 0xea, 0xbb, 0x85, 0x53, 0x89, 0x01, 0x00,
	0x00,
}

func (m *SampleID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SampleID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SampleID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Axis != 0 {
		i = encodeVarintIpldv2Pb(dAtA, i, uint64(m.Axis))
		i--
		dAtA[i] = 0x20
	}
	if m.Index != 0 {
		i = encodeVarintIpldv2Pb(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x18
	}
	if len(m.DahRoot) > 0 {
		i -= len(m.DahRoot)
		copy(dAtA[i:], m.DahRoot)
		i = encodeVarintIpldv2Pb(dAtA, i, uint64(len(m.DahRoot)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DataRoot) > 0 {
		i -= len(m.DataRoot)
		copy(dAtA[i:], m.DataRoot)
		i = encodeVarintIpldv2Pb(dAtA, i, uint64(len(m.DataRoot)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Sample) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Sample) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Sample) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Proof != nil {
		{
			size, err := m.Proof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintIpldv2Pb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Share) > 0 {
		i -= len(m.Share)
		copy(dAtA[i:], m.Share)
		i = encodeVarintIpldv2Pb(dAtA, i, uint64(len(m.Share)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Type != 0 {
		i = encodeVarintIpldv2Pb(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintIpldv2Pb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintIpldv2Pb(dAtA []byte, offset int, v uint64) int {
	offset -= sovIpldv2Pb(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SampleID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DataRoot)
	if l > 0 {
		n += 1 + l + sovIpldv2Pb(uint64(l))
	}
	l = len(m.DahRoot)
	if l > 0 {
		n += 1 + l + sovIpldv2Pb(uint64(l))
	}
	if m.Index != 0 {
		n += 1 + sovIpldv2Pb(uint64(m.Index))
	}
	if m.Axis != 0 {
		n += 1 + sovIpldv2Pb(uint64(m.Axis))
	}
	return n
}

func (m *Sample) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovIpldv2Pb(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovIpldv2Pb(uint64(m.Type))
	}
	l = len(m.Share)
	if l > 0 {
		n += 1 + l + sovIpldv2Pb(uint64(l))
	}
	if m.Proof != nil {
		l = m.Proof.Size()
		n += 1 + l + sovIpldv2Pb(uint64(l))
	}
	return n
}

func sovIpldv2Pb(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIpldv2Pb(x uint64) (n int) {
	return sovIpldv2Pb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SampleID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpldv2Pb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SampleID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SampleID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpldv2Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthIpldv2Pb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthIpldv2Pb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataRoot = append(m.DataRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.DataRoot == nil {
				m.DataRoot = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DahRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpldv2Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthIpldv2Pb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthIpldv2Pb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DahRoot = append(m.DahRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.DahRoot == nil {
				m.DahRoot = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpldv2Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Axis", wireType)
			}
			m.Axis = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpldv2Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Axis |= Axis(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIpldv2Pb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIpldv2Pb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Sample) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpldv2Pb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Sample: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Sample: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpldv2Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpldv2Pb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIpldv2Pb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &SampleID{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpldv2Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= SampleType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Share", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpldv2Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthIpldv2Pb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthIpldv2Pb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Share = append(m.Share[:0], dAtA[iNdEx:postIndex]...)
			if m.Share == nil {
				m.Share = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpldv2Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpldv2Pb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIpldv2Pb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Proof == nil {
				m.Proof = &pb.Proof{}
			}
			if err := m.Proof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpldv2Pb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIpldv2Pb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIpldv2Pb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIpldv2Pb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIpldv2Pb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIpldv2Pb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIpldv2Pb
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupIpldv2Pb
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthIpldv2Pb
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthIpldv2Pb        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIpldv2Pb          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupIpldv2Pb = fmt.Errorf("proto: unexpected end of group")
)
