// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: share/ipldv2/pb/ipldv2pb.proto

package ipldv2pb

import (
	fmt "fmt"
	pb "github.com/celestiaorg/nmt/pb"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AxisType int32

const (
	AxisType_Row AxisType = 0
	AxisType_Col AxisType = 1
)

var AxisType_name = map[int32]string{
	0: "Row",
	1: "Col",
}

var AxisType_value = map[string]int32{
	"Row": 0,
	"Col": 1,
}

func (x AxisType) String() string {
	return proto.EnumName(AxisType_name, int32(x))
}

func (AxisType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cb41c3a4f982a271, []int{0}
}

type SampleType int32

const (
	SampleType_DataSample   SampleType = 0
	SampleType_ParitySample SampleType = 1
)

var SampleType_name = map[int32]string{
	0: "DataSample",
	1: "ParitySample",
}

var SampleType_value = map[string]int32{
	"DataSample":   0,
	"ParitySample": 1,
}

func (x SampleType) String() string {
	return proto.EnumName(SampleType_name, int32(x))
}

func (SampleType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cb41c3a4f982a271, []int{1}
}

type Axis struct {
	AxisId   []byte   `protobuf:"bytes,1,opt,name=axis_id,json=axisId,proto3" json:"axis_id,omitempty"`
	AxisHalf [][]byte `protobuf:"bytes,2,rep,name=axis_half,json=axisHalf,proto3" json:"axis_half,omitempty"`
}

func (m *Axis) Reset()         { *m = Axis{} }
func (m *Axis) String() string { return proto.CompactTextString(m) }
func (*Axis) ProtoMessage()    {}
func (*Axis) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb41c3a4f982a271, []int{0}
}
func (m *Axis) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Axis) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Axis.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Axis) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Axis.Merge(m, src)
}
func (m *Axis) XXX_Size() int {
	return m.Size()
}
func (m *Axis) XXX_DiscardUnknown() {
	xxx_messageInfo_Axis.DiscardUnknown(m)
}

var xxx_messageInfo_Axis proto.InternalMessageInfo

func (m *Axis) GetAxisId() []byte {
	if m != nil {
		return m.AxisId
	}
	return nil
}

func (m *Axis) GetAxisHalf() [][]byte {
	if m != nil {
		return m.AxisHalf
	}
	return nil
}

type Sample struct {
	SampleId    []byte     `protobuf:"bytes,1,opt,name=sample_id,json=sampleId,proto3" json:"sample_id,omitempty"`
	SampleType  SampleType `protobuf:"varint,2,opt,name=sample_type,json=sampleType,proto3,enum=SampleType" json:"sample_type,omitempty"`
	SampleShare []byte     `protobuf:"bytes,3,opt,name=sample_share,json=sampleShare,proto3" json:"sample_share,omitempty"`
	SampleProof *pb.Proof  `protobuf:"bytes,4,opt,name=sample_proof,json=sampleProof,proto3" json:"sample_proof,omitempty"`
}

func (m *Sample) Reset()         { *m = Sample{} }
func (m *Sample) String() string { return proto.CompactTextString(m) }
func (*Sample) ProtoMessage()    {}
func (*Sample) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb41c3a4f982a271, []int{1}
}
func (m *Sample) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Sample) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Sample.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Sample) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sample.Merge(m, src)
}
func (m *Sample) XXX_Size() int {
	return m.Size()
}
func (m *Sample) XXX_DiscardUnknown() {
	xxx_messageInfo_Sample.DiscardUnknown(m)
}

var xxx_messageInfo_Sample proto.InternalMessageInfo

func (m *Sample) GetSampleId() []byte {
	if m != nil {
		return m.SampleId
	}
	return nil
}

func (m *Sample) GetSampleType() SampleType {
	if m != nil {
		return m.SampleType
	}
	return SampleType_DataSample
}

func (m *Sample) GetSampleShare() []byte {
	if m != nil {
		return m.SampleShare
	}
	return nil
}

func (m *Sample) GetSampleProof() *pb.Proof {
	if m != nil {
		return m.SampleProof
	}
	return nil
}

type Data struct {
	DataId     []byte    `protobuf:"bytes,1,opt,name=data_id,json=dataId,proto3" json:"data_id,omitempty"`
	DataShares [][]byte  `protobuf:"bytes,2,rep,name=data_shares,json=dataShares,proto3" json:"data_shares,omitempty"`
	DataProof  *pb.Proof `protobuf:"bytes,3,opt,name=data_proof,json=dataProof,proto3" json:"data_proof,omitempty"`
}

func (m *Data) Reset()         { *m = Data{} }
func (m *Data) String() string { return proto.CompactTextString(m) }
func (*Data) ProtoMessage()    {}
func (*Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb41c3a4f982a271, []int{2}
}
func (m *Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Data.Merge(m, src)
}
func (m *Data) XXX_Size() int {
	return m.Size()
}
func (m *Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Data proto.InternalMessageInfo

func (m *Data) GetDataId() []byte {
	if m != nil {
		return m.DataId
	}
	return nil
}

func (m *Data) GetDataShares() [][]byte {
	if m != nil {
		return m.DataShares
	}
	return nil
}

func (m *Data) GetDataProof() *pb.Proof {
	if m != nil {
		return m.DataProof
	}
	return nil
}

func init() {
	proto.RegisterEnum("AxisType", AxisType_name, AxisType_value)
	proto.RegisterEnum("SampleType", SampleType_name, SampleType_value)
	proto.RegisterType((*Axis)(nil), "Axis")
	proto.RegisterType((*Sample)(nil), "Sample")
	proto.RegisterType((*Data)(nil), "Data")
}

func init() { proto.RegisterFile("share/ipldv2/pb/ipldv2pb.proto", fileDescriptor_cb41c3a4f982a271) }

var fileDescriptor_cb41c3a4f982a271 = []byte{
	// 336 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x51, 0xbd, 0x4e, 0xf3, 0x40,
	0x10, 0xf4, 0xc5, 0x51, 0x7e, 0xd6, 0x56, 0x3e, 0xeb, 0x9a, 0xcf, 0x02, 0x74, 0x98, 0x54, 0x56,
	0x84, 0x1c, 0xc9, 0xb4, 0x34, 0xfc, 0x14, 0xa4, 0x8b, 0x1c, 0x7a, 0x74, 0x96, 0x1d, 0xc5, 0x92,
	0x91, 0x4f, 0x3e, 0x0b, 0x92, 0xb7, 0xe0, 0x39, 0x78, 0x12, 0xca, 0x94, 0x94, 0x28, 0x79, 0x11,
	0xb4, 0xeb, 0x23, 0xa1, 0xa0, 0x9b, 0x99, 0x9d, 0xdb, 0xf1, 0xac, 0x41, 0xe8, 0x95, 0xac, 0xf3,
	0x69, 0xa1, 0xca, 0xec, 0x25, 0x9e, 0xaa, 0xd4, 0x20, 0x95, 0x46, 0xaa, 0xae, 0x9a, 0xea, 0x64,
	0xa4, 0xd2, 0xa9, 0xaa, 0xab, 0x6a, 0xd9, 0xf2, 0xf1, 0x35, 0x74, 0x6f, 0xd6, 0x85, 0xe6, 0xff,
	0xa1, 0x2f, 0xd7, 0x85, 0x7e, 0x2a, 0x32, 0x9f, 0x05, 0x2c, 0x74, 0x93, 0x1e, 0xd2, 0x59, 0xc6,
	0x4f, 0x61, 0x48, 0x83, 0x95, 0x2c, 0x97, 0x7e, 0x27, 0xb0, 0x43, 0x37, 0x19, 0xa0, 0xf0, 0x20,
	0xcb, 0xe5, 0xf8, 0x9d, 0x41, 0x6f, 0x21, 0x9f, 0x55, 0x99, 0xa3, 0x4f, 0x13, 0x3a, 0xae, 0x18,
	0xb4, 0xc2, 0x2c, 0xe3, 0x97, 0xe0, 0x98, 0x61, 0xb3, 0x51, 0xb9, 0xdf, 0x09, 0x58, 0x38, 0x8a,
	0x9d, 0xa8, 0x7d, 0xfa, 0xb8, 0x51, 0x79, 0x02, 0xfa, 0x80, 0xf9, 0x05, 0xb8, 0xc6, 0x4d, 0x65,
	0x7c, 0x9b, 0xb6, 0x99, 0x0d, 0x0b, 0x94, 0x78, 0x7c, 0xb0, 0x50, 0x19, 0xbf, 0x1b, 0xb0, 0xd0,
	0x89, 0xff, 0x45, 0xa6, 0x5a, 0x1a, 0xcd, 0x11, 0xfc, 0xbc, 0x21, 0x32, 0x56, 0xd0, 0xbd, 0x97,
	0x8d, 0xc4, 0xaa, 0x99, 0x6c, 0xe4, 0xaf, 0xaa, 0x48, 0x67, 0x19, 0x3f, 0x07, 0x87, 0x06, 0x94,
	0xaa, 0x4d, 0x59, 0x40, 0x89, 0x42, 0x35, 0x8f, 0x80, 0x98, 0xc9, 0xb4, 0xff, 0xce, 0x1c, 0xa2,
	0x85, 0xe0, 0xe4, 0x0c, 0x06, 0x78, 0x5c, 0x2a, 0xd5, 0x07, 0x3b, 0xa9, 0x5e, 0x3d, 0x0b, 0xc1,
	0x5d, 0x55, 0x7a, 0x6c, 0x12, 0x01, 0x1c, 0x0f, 0xc0, 0x47, 0x00, 0xf8, 0x75, 0xad, 0xe2, 0x59,
	0xdc, 0x03, 0x77, 0x2e, 0xeb, 0xa2, 0xd9, 0x18, 0x85, 0xdd, 0xfa, 0x1f, 0x3b, 0xc1, 0xb6, 0x3b,
	0xc1, 0xbe, 0x76, 0x82, 0xbd, 0xed, 0x85, 0xb5, 0xdd, 0x0b, 0xeb, 0x73, 0x2f, 0xac, 0xb4, 0x47,
	0xff, 0xf2, 0xea, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x91, 0x61, 0x65, 0x9c, 0xfd, 0x01, 0x00, 0x00,
}

func (m *Axis) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Axis) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Axis) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AxisHalf) > 0 {
		for iNdEx := len(m.AxisHalf) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AxisHalf[iNdEx])
			copy(dAtA[i:], m.AxisHalf[iNdEx])
			i = encodeVarintIpldv2Pb(dAtA, i, uint64(len(m.AxisHalf[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.AxisId) > 0 {
		i -= len(m.AxisId)
		copy(dAtA[i:], m.AxisId)
		i = encodeVarintIpldv2Pb(dAtA, i, uint64(len(m.AxisId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Sample) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Sample) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Sample) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SampleProof != nil {
		{
			size, err := m.SampleProof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintIpldv2Pb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.SampleShare) > 0 {
		i -= len(m.SampleShare)
		copy(dAtA[i:], m.SampleShare)
		i = encodeVarintIpldv2Pb(dAtA, i, uint64(len(m.SampleShare)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SampleType != 0 {
		i = encodeVarintIpldv2Pb(dAtA, i, uint64(m.SampleType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.SampleId) > 0 {
		i -= len(m.SampleId)
		copy(dAtA[i:], m.SampleId)
		i = encodeVarintIpldv2Pb(dAtA, i, uint64(len(m.SampleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DataProof != nil {
		{
			size, err := m.DataProof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintIpldv2Pb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DataShares) > 0 {
		for iNdEx := len(m.DataShares) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DataShares[iNdEx])
			copy(dAtA[i:], m.DataShares[iNdEx])
			i = encodeVarintIpldv2Pb(dAtA, i, uint64(len(m.DataShares[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.DataId) > 0 {
		i -= len(m.DataId)
		copy(dAtA[i:], m.DataId)
		i = encodeVarintIpldv2Pb(dAtA, i, uint64(len(m.DataId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintIpldv2Pb(dAtA []byte, offset int, v uint64) int {
	offset -= sovIpldv2Pb(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Axis) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AxisId)
	if l > 0 {
		n += 1 + l + sovIpldv2Pb(uint64(l))
	}
	if len(m.AxisHalf) > 0 {
		for _, b := range m.AxisHalf {
			l = len(b)
			n += 1 + l + sovIpldv2Pb(uint64(l))
		}
	}
	return n
}

func (m *Sample) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SampleId)
	if l > 0 {
		n += 1 + l + sovIpldv2Pb(uint64(l))
	}
	if m.SampleType != 0 {
		n += 1 + sovIpldv2Pb(uint64(m.SampleType))
	}
	l = len(m.SampleShare)
	if l > 0 {
		n += 1 + l + sovIpldv2Pb(uint64(l))
	}
	if m.SampleProof != nil {
		l = m.SampleProof.Size()
		n += 1 + l + sovIpldv2Pb(uint64(l))
	}
	return n
}

func (m *Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DataId)
	if l > 0 {
		n += 1 + l + sovIpldv2Pb(uint64(l))
	}
	if len(m.DataShares) > 0 {
		for _, b := range m.DataShares {
			l = len(b)
			n += 1 + l + sovIpldv2Pb(uint64(l))
		}
	}
	if m.DataProof != nil {
		l = m.DataProof.Size()
		n += 1 + l + sovIpldv2Pb(uint64(l))
	}
	return n
}

func sovIpldv2Pb(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIpldv2Pb(x uint64) (n int) {
	return sovIpldv2Pb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Axis) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpldv2Pb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Axis: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Axis: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AxisId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpldv2Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthIpldv2Pb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthIpldv2Pb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AxisId = append(m.AxisId[:0], dAtA[iNdEx:postIndex]...)
			if m.AxisId == nil {
				m.AxisId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AxisHalf", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpldv2Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthIpldv2Pb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthIpldv2Pb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AxisHalf = append(m.AxisHalf, make([]byte, postIndex-iNdEx))
			copy(m.AxisHalf[len(m.AxisHalf)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpldv2Pb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIpldv2Pb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Sample) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpldv2Pb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Sample: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Sample: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SampleId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpldv2Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthIpldv2Pb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthIpldv2Pb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SampleId = append(m.SampleId[:0], dAtA[iNdEx:postIndex]...)
			if m.SampleId == nil {
				m.SampleId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SampleType", wireType)
			}
			m.SampleType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpldv2Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SampleType |= SampleType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SampleShare", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpldv2Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthIpldv2Pb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthIpldv2Pb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SampleShare = append(m.SampleShare[:0], dAtA[iNdEx:postIndex]...)
			if m.SampleShare == nil {
				m.SampleShare = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SampleProof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpldv2Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpldv2Pb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIpldv2Pb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SampleProof == nil {
				m.SampleProof = &pb.Proof{}
			}
			if err := m.SampleProof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpldv2Pb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIpldv2Pb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpldv2Pb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpldv2Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthIpldv2Pb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthIpldv2Pb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataId = append(m.DataId[:0], dAtA[iNdEx:postIndex]...)
			if m.DataId == nil {
				m.DataId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataShares", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpldv2Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthIpldv2Pb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthIpldv2Pb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataShares = append(m.DataShares, make([]byte, postIndex-iNdEx))
			copy(m.DataShares[len(m.DataShares)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataProof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpldv2Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpldv2Pb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIpldv2Pb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DataProof == nil {
				m.DataProof = &pb.Proof{}
			}
			if err := m.DataProof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpldv2Pb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIpldv2Pb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIpldv2Pb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIpldv2Pb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIpldv2Pb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIpldv2Pb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIpldv2Pb
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupIpldv2Pb
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthIpldv2Pb
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthIpldv2Pb        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIpldv2Pb          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupIpldv2Pb = fmt.Errorf("proto: unexpected end of group")
)
