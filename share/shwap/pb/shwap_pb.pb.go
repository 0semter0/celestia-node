// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: share/shwap/pb/shwap_pb.proto

package shwap_pb

import (
	fmt "fmt"
	pb "github.com/celestiaorg/nmt/pb"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SampleProofType int32

const (
	SampleProofType_RowSampleProofType SampleProofType = 0
	SampleProofType_ColSampleProofType SampleProofType = 1
)

var SampleProofType_name = map[int32]string{
	0: "RowSampleProofType",
	1: "ColSampleProofType",
}

var SampleProofType_value = map[string]int32{
	"RowSampleProofType": 0,
	"ColSampleProofType": 1,
}

func (x SampleProofType) String() string {
	return proto.EnumName(SampleProofType_name, int32(x))
}

func (SampleProofType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fdfe0676a85dc852, []int{0}
}

type Row struct {
	RowId   []byte   `protobuf:"bytes,1,opt,name=row_id,json=rowId,proto3" json:"row_id,omitempty"`
	RowHalf [][]byte `protobuf:"bytes,2,rep,name=row_half,json=rowHalf,proto3" json:"row_half,omitempty"`
}

func (m *Row) Reset()         { *m = Row{} }
func (m *Row) String() string { return proto.CompactTextString(m) }
func (*Row) ProtoMessage()    {}
func (*Row) Descriptor() ([]byte, []int) {
	return fileDescriptor_fdfe0676a85dc852, []int{0}
}
func (m *Row) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Row) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Row.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Row) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Row.Merge(m, src)
}
func (m *Row) XXX_Size() int {
	return m.Size()
}
func (m *Row) XXX_DiscardUnknown() {
	xxx_messageInfo_Row.DiscardUnknown(m)
}

var xxx_messageInfo_Row proto.InternalMessageInfo

func (m *Row) GetRowId() []byte {
	if m != nil {
		return m.RowId
	}
	return nil
}

func (m *Row) GetRowHalf() [][]byte {
	if m != nil {
		return m.RowHalf
	}
	return nil
}

type Sample struct {
	SampleId    []byte          `protobuf:"bytes,1,opt,name=sample_id,json=sampleId,proto3" json:"sample_id,omitempty"`
	SampleType  SampleProofType `protobuf:"varint,2,opt,name=sample_type,json=sampleType,proto3,enum=SampleProofType" json:"sample_type,omitempty"`
	SampleShare []byte          `protobuf:"bytes,3,opt,name=sample_share,json=sampleShare,proto3" json:"sample_share,omitempty"`
	SampleProof *pb.Proof       `protobuf:"bytes,4,opt,name=sample_proof,json=sampleProof,proto3" json:"sample_proof,omitempty"`
}

func (m *Sample) Reset()         { *m = Sample{} }
func (m *Sample) String() string { return proto.CompactTextString(m) }
func (*Sample) ProtoMessage()    {}
func (*Sample) Descriptor() ([]byte, []int) {
	return fileDescriptor_fdfe0676a85dc852, []int{1}
}
func (m *Sample) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Sample) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Sample.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Sample) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sample.Merge(m, src)
}
func (m *Sample) XXX_Size() int {
	return m.Size()
}
func (m *Sample) XXX_DiscardUnknown() {
	xxx_messageInfo_Sample.DiscardUnknown(m)
}

var xxx_messageInfo_Sample proto.InternalMessageInfo

func (m *Sample) GetSampleId() []byte {
	if m != nil {
		return m.SampleId
	}
	return nil
}

func (m *Sample) GetSampleType() SampleProofType {
	if m != nil {
		return m.SampleType
	}
	return SampleProofType_RowSampleProofType
}

func (m *Sample) GetSampleShare() []byte {
	if m != nil {
		return m.SampleShare
	}
	return nil
}

func (m *Sample) GetSampleProof() *pb.Proof {
	if m != nil {
		return m.SampleProof
	}
	return nil
}

type Data struct {
	DataId     []byte    `protobuf:"bytes,1,opt,name=data_id,json=dataId,proto3" json:"data_id,omitempty"`
	DataShares [][]byte  `protobuf:"bytes,2,rep,name=data_shares,json=dataShares,proto3" json:"data_shares,omitempty"`
	DataProof  *pb.Proof `protobuf:"bytes,3,opt,name=data_proof,json=dataProof,proto3" json:"data_proof,omitempty"`
}

func (m *Data) Reset()         { *m = Data{} }
func (m *Data) String() string { return proto.CompactTextString(m) }
func (*Data) ProtoMessage()    {}
func (*Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_fdfe0676a85dc852, []int{2}
}
func (m *Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Data.Merge(m, src)
}
func (m *Data) XXX_Size() int {
	return m.Size()
}
func (m *Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Data proto.InternalMessageInfo

func (m *Data) GetDataId() []byte {
	if m != nil {
		return m.DataId
	}
	return nil
}

func (m *Data) GetDataShares() [][]byte {
	if m != nil {
		return m.DataShares
	}
	return nil
}

func (m *Data) GetDataProof() *pb.Proof {
	if m != nil {
		return m.DataProof
	}
	return nil
}

func init() {
	proto.RegisterEnum("SampleProofType", SampleProofType_name, SampleProofType_value)
	proto.RegisterType((*Row)(nil), "Row")
	proto.RegisterType((*Sample)(nil), "Sample")
	proto.RegisterType((*Data)(nil), "Data")
}

func init() { proto.RegisterFile("share/shwap/pb/shwap_pb.proto", fileDescriptor_fdfe0676a85dc852) }

var fileDescriptor_fdfe0676a85dc852 = []byte{
	// 322 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x51, 0x4d, 0x4f, 0xc2, 0x40,
	0x14, 0xec, 0x52, 0x2c, 0xf0, 0x20, 0x40, 0x36, 0x51, 0x57, 0x8d, 0x6b, 0xe5, 0xd4, 0x78, 0x28,
	0x11, 0x0f, 0x9e, 0xfd, 0x38, 0xc8, 0xcd, 0x14, 0xef, 0x64, 0x9b, 0x96, 0x60, 0x52, 0xb3, 0x9b,
	0x6d, 0x93, 0x0d, 0xff, 0xc2, 0x7f, 0xe2, 0xdf, 0xf0, 0xc8, 0xd1, 0xa3, 0x81, 0x3f, 0x62, 0xf6,
	0x75, 0x95, 0x84, 0x78, 0x9b, 0x99, 0x7d, 0xf3, 0xe6, 0x4d, 0x16, 0xce, 0xcb, 0xa5, 0xd0, 0xf9,
	0xb8, 0x5c, 0x1a, 0xa1, 0xc6, 0x2a, 0xad, 0xc1, 0x5c, 0xa5, 0xb1, 0xd2, 0xb2, 0x92, 0xa7, 0x7d,
	0x95, 0x8e, 0x95, 0x96, 0x72, 0x51, 0xf3, 0xd1, 0x2d, 0xf8, 0x89, 0x34, 0xf4, 0x10, 0x02, 0x2d,
	0xcd, 0xfc, 0x35, 0x63, 0x24, 0x24, 0x51, 0x2f, 0x39, 0xd0, 0xd2, 0x4c, 0x33, 0x7a, 0x02, 0x6d,
	0x2b, 0x2f, 0x45, 0xb1, 0x60, 0x8d, 0xd0, 0x8f, 0x7a, 0x49, 0x4b, 0x4b, 0xf3, 0x24, 0x8a, 0xc5,
	0xe8, 0x83, 0x40, 0x30, 0x13, 0x6f, 0xaa, 0xc8, 0xe9, 0x19, 0x74, 0x4a, 0x44, 0x3b, 0x7f, 0xbb,
	0x16, 0xa6, 0x19, 0xbd, 0x86, 0xae, 0x7b, 0xac, 0x56, 0x2a, 0x67, 0x8d, 0x90, 0x44, 0xfd, 0xc9,
	0x30, 0xae, 0xad, 0xcf, 0xf6, 0x92, 0x97, 0x95, 0xca, 0x13, 0xa8, 0x87, 0x2c, 0xa6, 0x97, 0xd0,
	0x73, 0x16, 0xec, 0xc2, 0x7c, 0x5c, 0xe9, 0xd6, 0xcc, 0xac, 0x44, 0x27, 0x7f, 0x23, 0x58, 0x86,
	0x35, 0x43, 0x12, 0x75, 0x27, 0x83, 0xd8, 0x55, 0x4b, 0x63, 0xdc, 0xfc, 0xeb, 0x41, 0x32, 0x52,
	0xd0, 0x7c, 0x14, 0x95, 0xa0, 0xc7, 0xd0, 0xca, 0x44, 0x25, 0x76, 0xc7, 0x06, 0x96, 0x4e, 0x33,
	0x7a, 0x01, 0x5d, 0x7c, 0xc0, 0xd4, 0xd2, 0x15, 0x06, 0x2b, 0x61, 0x68, 0x49, 0x63, 0x40, 0xe6,
	0x32, 0xfd, 0xff, 0x33, 0x3b, 0x76, 0x04, 0xe1, 0xd5, 0x1d, 0x0c, 0xf6, 0x7a, 0xd2, 0x23, 0xa0,
	0x89, 0x34, 0x7b, 0xea, 0xd0, 0xb3, 0xfa, 0x83, 0x2c, 0xf6, 0x75, 0x72, 0xcf, 0x3e, 0x37, 0x9c,
	0xac, 0x37, 0x9c, 0x7c, 0x6f, 0x38, 0x79, 0xdf, 0x72, 0x6f, 0xbd, 0xe5, 0xde, 0xd7, 0x96, 0x7b,
	0x69, 0x80, 0x1f, 0x78, 0xf3, 0x13, 0x00, 0x00, 0xff, 0xff, 0xa1, 0x0e, 0x39, 0xc1, 0xf1, 0x01,
	0x00, 0x00,
}

func (m *Row) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Row) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Row) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RowHalf) > 0 {
		for iNdEx := len(m.RowHalf) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RowHalf[iNdEx])
			copy(dAtA[i:], m.RowHalf[iNdEx])
			i = encodeVarintShwapPb(dAtA, i, uint64(len(m.RowHalf[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.RowId) > 0 {
		i -= len(m.RowId)
		copy(dAtA[i:], m.RowId)
		i = encodeVarintShwapPb(dAtA, i, uint64(len(m.RowId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Sample) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Sample) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Sample) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SampleProof != nil {
		{
			size, err := m.SampleProof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintShwapPb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.SampleShare) > 0 {
		i -= len(m.SampleShare)
		copy(dAtA[i:], m.SampleShare)
		i = encodeVarintShwapPb(dAtA, i, uint64(len(m.SampleShare)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SampleType != 0 {
		i = encodeVarintShwapPb(dAtA, i, uint64(m.SampleType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.SampleId) > 0 {
		i -= len(m.SampleId)
		copy(dAtA[i:], m.SampleId)
		i = encodeVarintShwapPb(dAtA, i, uint64(len(m.SampleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DataProof != nil {
		{
			size, err := m.DataProof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintShwapPb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DataShares) > 0 {
		for iNdEx := len(m.DataShares) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DataShares[iNdEx])
			copy(dAtA[i:], m.DataShares[iNdEx])
			i = encodeVarintShwapPb(dAtA, i, uint64(len(m.DataShares[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.DataId) > 0 {
		i -= len(m.DataId)
		copy(dAtA[i:], m.DataId)
		i = encodeVarintShwapPb(dAtA, i, uint64(len(m.DataId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintShwapPb(dAtA []byte, offset int, v uint64) int {
	offset -= sovShwapPb(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Row) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RowId)
	if l > 0 {
		n += 1 + l + sovShwapPb(uint64(l))
	}
	if len(m.RowHalf) > 0 {
		for _, b := range m.RowHalf {
			l = len(b)
			n += 1 + l + sovShwapPb(uint64(l))
		}
	}
	return n
}

func (m *Sample) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SampleId)
	if l > 0 {
		n += 1 + l + sovShwapPb(uint64(l))
	}
	if m.SampleType != 0 {
		n += 1 + sovShwapPb(uint64(m.SampleType))
	}
	l = len(m.SampleShare)
	if l > 0 {
		n += 1 + l + sovShwapPb(uint64(l))
	}
	if m.SampleProof != nil {
		l = m.SampleProof.Size()
		n += 1 + l + sovShwapPb(uint64(l))
	}
	return n
}

func (m *Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DataId)
	if l > 0 {
		n += 1 + l + sovShwapPb(uint64(l))
	}
	if len(m.DataShares) > 0 {
		for _, b := range m.DataShares {
			l = len(b)
			n += 1 + l + sovShwapPb(uint64(l))
		}
	}
	if m.DataProof != nil {
		l = m.DataProof.Size()
		n += 1 + l + sovShwapPb(uint64(l))
	}
	return n
}

func sovShwapPb(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozShwapPb(x uint64) (n int) {
	return sovShwapPb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Row) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShwapPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Row: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Row: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RowId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShwapPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthShwapPb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthShwapPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RowId = append(m.RowId[:0], dAtA[iNdEx:postIndex]...)
			if m.RowId == nil {
				m.RowId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RowHalf", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShwapPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthShwapPb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthShwapPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RowHalf = append(m.RowHalf, make([]byte, postIndex-iNdEx))
			copy(m.RowHalf[len(m.RowHalf)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShwapPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthShwapPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Sample) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShwapPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Sample: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Sample: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SampleId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShwapPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthShwapPb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthShwapPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SampleId = append(m.SampleId[:0], dAtA[iNdEx:postIndex]...)
			if m.SampleId == nil {
				m.SampleId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SampleType", wireType)
			}
			m.SampleType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShwapPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SampleType |= SampleProofType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SampleShare", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShwapPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthShwapPb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthShwapPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SampleShare = append(m.SampleShare[:0], dAtA[iNdEx:postIndex]...)
			if m.SampleShare == nil {
				m.SampleShare = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SampleProof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShwapPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShwapPb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShwapPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SampleProof == nil {
				m.SampleProof = &pb.Proof{}
			}
			if err := m.SampleProof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShwapPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthShwapPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShwapPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShwapPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthShwapPb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthShwapPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataId = append(m.DataId[:0], dAtA[iNdEx:postIndex]...)
			if m.DataId == nil {
				m.DataId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataShares", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShwapPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthShwapPb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthShwapPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataShares = append(m.DataShares, make([]byte, postIndex-iNdEx))
			copy(m.DataShares[len(m.DataShares)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataProof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShwapPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShwapPb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShwapPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DataProof == nil {
				m.DataProof = &pb.Proof{}
			}
			if err := m.DataProof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShwapPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthShwapPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipShwapPb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowShwapPb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowShwapPb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowShwapPb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthShwapPb
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupShwapPb
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthShwapPb
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthShwapPb        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowShwapPb          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupShwapPb = fmt.Errorf("proto: unexpected end of group")
)
