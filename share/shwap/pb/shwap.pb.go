// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: share/shwap/pb/shwap.proto

package shwap

import (
	fmt "fmt"
	pb "github.com/celestiaorg/celestia-node/share/pb"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RowBlock struct {
	RowId []byte  `protobuf:"bytes,1,opt,name=row_id,json=rowId,proto3" json:"row_id,omitempty"`
	Row   *pb.Row `protobuf:"bytes,2,opt,name=row,proto3" json:"row,omitempty"`
}

func (m *RowBlock) Reset()         { *m = RowBlock{} }
func (m *RowBlock) String() string { return proto.CompactTextString(m) }
func (*RowBlock) ProtoMessage()    {}
func (*RowBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_9431653f3c9f0bcb, []int{0}
}
func (m *RowBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RowBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RowBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RowBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RowBlock.Merge(m, src)
}
func (m *RowBlock) XXX_Size() int {
	return m.Size()
}
func (m *RowBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_RowBlock.DiscardUnknown(m)
}

var xxx_messageInfo_RowBlock proto.InternalMessageInfo

func (m *RowBlock) GetRowId() []byte {
	if m != nil {
		return m.RowId
	}
	return nil
}

func (m *RowBlock) GetRow() *pb.Row {
	if m != nil {
		return m.Row
	}
	return nil
}

type SampleBlock struct {
	SampleId []byte             `protobuf:"bytes,1,opt,name=sample_id,json=sampleId,proto3" json:"sample_id,omitempty"`
	Sample   *pb.ShareWithProof `protobuf:"bytes,2,opt,name=sample,proto3" json:"sample,omitempty"`
}

func (m *SampleBlock) Reset()         { *m = SampleBlock{} }
func (m *SampleBlock) String() string { return proto.CompactTextString(m) }
func (*SampleBlock) ProtoMessage()    {}
func (*SampleBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_9431653f3c9f0bcb, []int{1}
}
func (m *SampleBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SampleBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SampleBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SampleBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SampleBlock.Merge(m, src)
}
func (m *SampleBlock) XXX_Size() int {
	return m.Size()
}
func (m *SampleBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_SampleBlock.DiscardUnknown(m)
}

var xxx_messageInfo_SampleBlock proto.InternalMessageInfo

func (m *SampleBlock) GetSampleId() []byte {
	if m != nil {
		return m.SampleId
	}
	return nil
}

func (m *SampleBlock) GetSample() *pb.ShareWithProof {
	if m != nil {
		return m.Sample
	}
	return nil
}

type DataBlock struct {
	DataId []byte             `protobuf:"bytes,1,opt,name=data_id,json=dataId,proto3" json:"data_id,omitempty"`
	Data   *pb.NamespacedData `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *DataBlock) Reset()         { *m = DataBlock{} }
func (m *DataBlock) String() string { return proto.CompactTextString(m) }
func (*DataBlock) ProtoMessage()    {}
func (*DataBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_9431653f3c9f0bcb, []int{2}
}
func (m *DataBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataBlock.Merge(m, src)
}
func (m *DataBlock) XXX_Size() int {
	return m.Size()
}
func (m *DataBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_DataBlock.DiscardUnknown(m)
}

var xxx_messageInfo_DataBlock proto.InternalMessageInfo

func (m *DataBlock) GetDataId() []byte {
	if m != nil {
		return m.DataId
	}
	return nil
}

func (m *DataBlock) GetData() *pb.NamespacedData {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*RowBlock)(nil), "RowBlock")
	proto.RegisterType((*SampleBlock)(nil), "SampleBlock")
	proto.RegisterType((*DataBlock)(nil), "DataBlock")
}

func init() { proto.RegisterFile("share/shwap/pb/shwap.proto", fileDescriptor_9431653f3c9f0bcb) }

var fileDescriptor_9431653f3c9f0bcb = []byte{
	// 243 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2a, 0xce, 0x48, 0x2c,
	0x4a, 0xd5, 0x2f, 0xce, 0x28, 0x4f, 0x2c, 0xd0, 0x2f, 0x48, 0x82, 0x30, 0xf4, 0x0a, 0x8a, 0xf2,
	0x4b, 0xf2, 0xa5, 0xb8, 0x4b, 0x2a, 0x0b, 0x52, 0x8b, 0x21, 0x1c, 0x25, 0x4b, 0x2e, 0x8e, 0xa0,
	0xfc, 0x72, 0xa7, 0x9c, 0xfc, 0xe4, 0x6c, 0x21, 0x51, 0x2e, 0xb6, 0xa2, 0xfc, 0xf2, 0xf8, 0xcc,
	0x14, 0x09, 0x46, 0x05, 0x46, 0x0d, 0x9e, 0x20, 0xd6, 0xa2, 0xfc, 0x72, 0xcf, 0x14, 0x21, 0x31,
	0x2e, 0xe6, 0xa2, 0xfc, 0x72, 0x09, 0x26, 0x05, 0x46, 0x0d, 0x6e, 0x23, 0x16, 0xbd, 0xa0, 0xfc,
	0xf2, 0x20, 0x90, 0x80, 0x52, 0x30, 0x17, 0x77, 0x70, 0x62, 0x6e, 0x41, 0x4e, 0x2a, 0x44, 0xb7,
	0x34, 0x17, 0x67, 0x31, 0x98, 0x8b, 0x30, 0x80, 0x03, 0x22, 0xe0, 0x99, 0x22, 0xa4, 0xce, 0xc5,
	0x06, 0x61, 0x43, 0x8d, 0xe1, 0xd7, 0x0b, 0x06, 0x39, 0x30, 0x3c, 0xb3, 0x24, 0x23, 0xa0, 0x28,
	0x3f, 0x3f, 0x2d, 0x08, 0x2a, 0xad, 0xe4, 0xc9, 0xc5, 0xe9, 0x92, 0x58, 0x92, 0x08, 0x31, 0x52,
	0x9c, 0x8b, 0x3d, 0x25, 0xb1, 0x24, 0x11, 0x61, 0x20, 0x1b, 0x88, 0xeb, 0x99, 0x22, 0xa4, 0xcc,
	0xc5, 0x02, 0x62, 0xc1, 0x0d, 0xf3, 0x4b, 0xcc, 0x4d, 0x2d, 0x2e, 0x48, 0x4c, 0x4e, 0x4d, 0x01,
	0x69, 0x0e, 0x02, 0x4b, 0x3a, 0x49, 0x9c, 0x78, 0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3, 0x83,
	0x47, 0x72, 0x8c, 0x13, 0x1e, 0xcb, 0x31, 0x5c, 0x78, 0x2c, 0xc7, 0x70, 0xe3, 0xb1, 0x1c, 0x43,
	0x12, 0x1b, 0xd8, 0xef, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3d, 0x5b, 0x5f, 0x76, 0x26,
	0x01, 0x00, 0x00,
}

func (m *RowBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RowBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RowBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Row != nil {
		{
			size, err := m.Row.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintShwap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RowId) > 0 {
		i -= len(m.RowId)
		copy(dAtA[i:], m.RowId)
		i = encodeVarintShwap(dAtA, i, uint64(len(m.RowId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SampleBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SampleBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SampleBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sample != nil {
		{
			size, err := m.Sample.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintShwap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SampleId) > 0 {
		i -= len(m.SampleId)
		copy(dAtA[i:], m.SampleId)
		i = encodeVarintShwap(dAtA, i, uint64(len(m.SampleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DataBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintShwap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.DataId) > 0 {
		i -= len(m.DataId)
		copy(dAtA[i:], m.DataId)
		i = encodeVarintShwap(dAtA, i, uint64(len(m.DataId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintShwap(dAtA []byte, offset int, v uint64) int {
	offset -= sovShwap(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RowBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RowId)
	if l > 0 {
		n += 1 + l + sovShwap(uint64(l))
	}
	if m.Row != nil {
		l = m.Row.Size()
		n += 1 + l + sovShwap(uint64(l))
	}
	return n
}

func (m *SampleBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SampleId)
	if l > 0 {
		n += 1 + l + sovShwap(uint64(l))
	}
	if m.Sample != nil {
		l = m.Sample.Size()
		n += 1 + l + sovShwap(uint64(l))
	}
	return n
}

func (m *DataBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DataId)
	if l > 0 {
		n += 1 + l + sovShwap(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovShwap(uint64(l))
	}
	return n
}

func sovShwap(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozShwap(x uint64) (n int) {
	return sovShwap(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RowBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShwap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RowBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RowBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RowId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthShwap
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthShwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RowId = append(m.RowId[:0], dAtA[iNdEx:postIndex]...)
			if m.RowId == nil {
				m.RowId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Row", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShwap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Row == nil {
				m.Row = &pb.Row{}
			}
			if err := m.Row.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShwap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthShwap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SampleBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShwap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SampleBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SampleBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SampleId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthShwap
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthShwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SampleId = append(m.SampleId[:0], dAtA[iNdEx:postIndex]...)
			if m.SampleId == nil {
				m.SampleId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sample", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShwap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sample == nil {
				m.Sample = &pb.ShareWithProof{}
			}
			if err := m.Sample.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShwap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthShwap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShwap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthShwap
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthShwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataId = append(m.DataId[:0], dAtA[iNdEx:postIndex]...)
			if m.DataId == nil {
				m.DataId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShwap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &pb.NamespacedData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShwap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthShwap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipShwap(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowShwap
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowShwap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowShwap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthShwap
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupShwap
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthShwap
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthShwap        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowShwap          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupShwap = fmt.Errorf("proto: unexpected end of group")
)
