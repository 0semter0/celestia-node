// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: service/header/extheader/pb/extended_header.proto

package header_pb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	da "github.com/tendermint/tendermint/proto/tendermint/da"
	types "github.com/tendermint/tendermint/proto/tendermint/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ExtendedHeader struct {
	Header       *types.Header              `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Commit       *types.Commit              `protobuf:"bytes,2,opt,name=commit,proto3" json:"commit,omitempty"`
	ValidatorSet *types.ValidatorSet        `protobuf:"bytes,3,opt,name=validator_set,json=validatorSet,proto3" json:"validator_set,omitempty"`
	Dah          *da.DataAvailabilityHeader `protobuf:"bytes,4,opt,name=dah,proto3" json:"dah,omitempty"`
}

func (m *ExtendedHeader) Reset()         { *m = ExtendedHeader{} }
func (m *ExtendedHeader) String() string { return proto.CompactTextString(m) }
func (*ExtendedHeader) ProtoMessage()    {}
func (*ExtendedHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_514d384958271ed9, []int{0}
}
func (m *ExtendedHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExtendedHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExtendedHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExtendedHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtendedHeader.Merge(m, src)
}
func (m *ExtendedHeader) XXX_Size() int {
	return m.Size()
}
func (m *ExtendedHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtendedHeader.DiscardUnknown(m)
}

var xxx_messageInfo_ExtendedHeader proto.InternalMessageInfo

func (m *ExtendedHeader) GetHeader() *types.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *ExtendedHeader) GetCommit() *types.Commit {
	if m != nil {
		return m.Commit
	}
	return nil
}

func (m *ExtendedHeader) GetValidatorSet() *types.ValidatorSet {
	if m != nil {
		return m.ValidatorSet
	}
	return nil
}

func (m *ExtendedHeader) GetDah() *da.DataAvailabilityHeader {
	if m != nil {
		return m.Dah
	}
	return nil
}

type ExtendedHeaderRequest struct {
	Origin uint64 `protobuf:"varint,1,opt,name=origin,proto3" json:"origin,omitempty"`
	Hash   []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	Amount uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *ExtendedHeaderRequest) Reset()         { *m = ExtendedHeaderRequest{} }
func (m *ExtendedHeaderRequest) String() string { return proto.CompactTextString(m) }
func (*ExtendedHeaderRequest) ProtoMessage()    {}
func (*ExtendedHeaderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_514d384958271ed9, []int{1}
}
func (m *ExtendedHeaderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExtendedHeaderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExtendedHeaderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExtendedHeaderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtendedHeaderRequest.Merge(m, src)
}
func (m *ExtendedHeaderRequest) XXX_Size() int {
	return m.Size()
}
func (m *ExtendedHeaderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtendedHeaderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExtendedHeaderRequest proto.InternalMessageInfo

func (m *ExtendedHeaderRequest) GetOrigin() uint64 {
	if m != nil {
		return m.Origin
	}
	return 0
}

func (m *ExtendedHeaderRequest) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *ExtendedHeaderRequest) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func init() {
	proto.RegisterType((*ExtendedHeader)(nil), "header.pb.ExtendedHeader")
	proto.RegisterType((*ExtendedHeaderRequest)(nil), "header.pb.ExtendedHeaderRequest")
}

func init() {
	proto.RegisterFile("service/header/extheader/pb/extended_header.proto", fileDescriptor_514d384958271ed9)
}

var fileDescriptor_514d384958271ed9 = []byte{
	// 320 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0xcf, 0x4a, 0xc3, 0x40,
	0x18, 0xc4, 0x1b, 0x1b, 0x0a, 0xae, 0xd5, 0xc3, 0x82, 0x12, 0x8a, 0x2c, 0xa5, 0x20, 0x78, 0x90,
	0xc4, 0x3f, 0x07, 0xcf, 0x5a, 0x05, 0xcf, 0x2b, 0x78, 0xf1, 0x50, 0xbe, 0x74, 0x3f, 0xcc, 0x42,
	0x93, 0xd4, 0xe4, 0x6b, 0xb0, 0x6f, 0xe1, 0x63, 0x79, 0xec, 0xd1, 0xa3, 0xb4, 0x6f, 0xe0, 0x13,
	0x48, 0x76, 0xb7, 0x9a, 0x52, 0xbc, 0x84, 0x9d, 0xcc, 0x6f, 0x36, 0x33, 0x61, 0x17, 0x25, 0x16,
	0x95, 0x1e, 0x63, 0x94, 0x20, 0x28, 0x2c, 0x22, 0x7c, 0x23, 0x77, 0x9a, 0xc6, 0xb5, 0xc0, 0x4c,
	0xa1, 0x1a, 0xd9, 0x57, 0xe1, 0xb4, 0xc8, 0x29, 0xe7, 0xbb, 0x6b, 0x15, 0xf7, 0x8e, 0x8d, 0x5f,
	0xa4, 0x3a, 0xa3, 0x88, 0xe6, 0x53, 0x2c, 0xed, 0xd3, 0x82, 0xbd, 0xfe, 0x96, 0x5b, 0xc1, 0x44,
	0x2b, 0xa0, 0xdc, 0x5d, 0xd5, 0x3b, 0x6b, 0x10, 0x0a, 0x22, 0x05, 0x04, 0x23, 0xa8, 0x40, 0x4f,
	0x20, 0xd6, 0x13, 0x4d, 0xf3, 0x8d, 0x0f, 0x0f, 0xbe, 0x3d, 0x76, 0x70, 0xef, 0x2a, 0x3d, 0x18,
	0x83, 0x9f, 0xb3, 0x8e, 0x45, 0x02, 0xaf, 0xef, 0x9d, 0xee, 0x5d, 0x06, 0xe1, 0xdf, 0x8d, 0xa1,
	0xed, 0x62, 0x49, 0xe9, 0xb8, 0x3a, 0x31, 0xce, 0xd3, 0x54, 0x53, 0xb0, 0xf3, 0x5f, 0x62, 0x68,
	0x7c, 0xe9, 0x38, 0x3e, 0x64, 0xfb, 0xbf, 0xbd, 0x47, 0x25, 0x52, 0xd0, 0x36, 0x41, 0xb1, 0x1d,
	0x7c, 0x5a, 0x63, 0x8f, 0x48, 0xb2, 0x5b, 0x35, 0x14, 0xbf, 0x66, 0x6d, 0x05, 0x49, 0xe0, 0x9b,
	0xe8, 0x49, 0x33, 0xaa, 0x20, 0xbc, 0x03, 0x82, 0x9b, 0xc6, 0x6c, 0x57, 0xb9, 0x4e, 0x0c, 0x9e,
	0xd9, 0xe1, 0xe6, 0x66, 0x89, 0xaf, 0x33, 0x2c, 0x89, 0x1f, 0xb1, 0x4e, 0x5e, 0xe8, 0x17, 0x9d,
	0x99, 0xe9, 0xbe, 0x74, 0x8a, 0x73, 0xe6, 0x27, 0x50, 0x26, 0x66, 0x5e, 0x57, 0x9a, 0x73, 0xcd,
	0x42, 0x9a, 0xcf, 0x32, 0xdb, 0xdd, 0x97, 0x4e, 0xdd, 0x06, 0x1f, 0x4b, 0xe1, 0x2d, 0x96, 0xc2,
	0xfb, 0x5a, 0x0a, 0xef, 0x7d, 0x25, 0x5a, 0x8b, 0x95, 0x68, 0x7d, 0xae, 0x44, 0x2b, 0xee, 0x98,
	0x5f, 0x7e, 0xf5, 0x13, 0x00, 0x00, 0xff, 0xff, 0x1d, 0x82, 0x4a, 0x0a, 0x20, 0x02, 0x00, 0x00,
}

func (m *ExtendedHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExtendedHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExtendedHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Dah != nil {
		{
			size, err := m.Dah.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExtendedHeader(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.ValidatorSet != nil {
		{
			size, err := m.ValidatorSet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExtendedHeader(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Commit != nil {
		{
			size, err := m.Commit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExtendedHeader(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExtendedHeader(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExtendedHeaderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExtendedHeaderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExtendedHeaderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		i = encodeVarintExtendedHeader(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintExtendedHeader(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x12
	}
	if m.Origin != 0 {
		i = encodeVarintExtendedHeader(dAtA, i, uint64(m.Origin))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintExtendedHeader(dAtA []byte, offset int, v uint64) int {
	offset -= sovExtendedHeader(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ExtendedHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovExtendedHeader(uint64(l))
	}
	if m.Commit != nil {
		l = m.Commit.Size()
		n += 1 + l + sovExtendedHeader(uint64(l))
	}
	if m.ValidatorSet != nil {
		l = m.ValidatorSet.Size()
		n += 1 + l + sovExtendedHeader(uint64(l))
	}
	if m.Dah != nil {
		l = m.Dah.Size()
		n += 1 + l + sovExtendedHeader(uint64(l))
	}
	return n
}

func (m *ExtendedHeaderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Origin != 0 {
		n += 1 + sovExtendedHeader(uint64(m.Origin))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovExtendedHeader(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovExtendedHeader(uint64(m.Amount))
	}
	return n
}

func sovExtendedHeader(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozExtendedHeader(x uint64) (n int) {
	return sovExtendedHeader(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ExtendedHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExtendedHeader
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExtendedHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExtendedHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtendedHeader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExtendedHeader
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExtendedHeader
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &types.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtendedHeader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExtendedHeader
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExtendedHeader
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Commit == nil {
				m.Commit = &types.Commit{}
			}
			if err := m.Commit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtendedHeader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExtendedHeader
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExtendedHeader
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ValidatorSet == nil {
				m.ValidatorSet = &types.ValidatorSet{}
			}
			if err := m.ValidatorSet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dah", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtendedHeader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExtendedHeader
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExtendedHeader
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dah == nil {
				m.Dah = &da.DataAvailabilityHeader{}
			}
			if err := m.Dah.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExtendedHeader(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExtendedHeader
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExtendedHeaderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExtendedHeader
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExtendedHeaderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExtendedHeaderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			m.Origin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtendedHeader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Origin |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtendedHeader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthExtendedHeader
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthExtendedHeader
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtendedHeader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipExtendedHeader(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExtendedHeader
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExtendedHeader(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExtendedHeader
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExtendedHeader
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExtendedHeader
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthExtendedHeader
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupExtendedHeader
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthExtendedHeader
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthExtendedHeader        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExtendedHeader          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupExtendedHeader = fmt.Errorf("proto: unexpected end of group")
)
