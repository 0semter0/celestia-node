package gateway

import (
	"bytes"
	"encoding/base64"
	"testing"

	"github.com/stretchr/testify/assert"

	"github.com/celestiaorg/celestia-app/pkg/appconsts"
)

func Test_dataFromShares(t *testing.T) {
	type testCase struct {
		name    string
		input   [][]byte
		want    [][]byte
		wantErr bool
	}

	smallTxInput := padShare([]uint8{
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, // namespace id
		0x1,                // info byte
		0x0, 0x0, 0x0, 0x2, // 1 byte (unit) + 1 byte (unit length) = 2 bytes sequence length
		0x0, 0x0, 0x0, 17, // reserved bytes
		0x1, // unit length of first transaction
		0xa, // data of first transaction
	})
	smallTxData := []byte{0x1, 0xa}

	largeTxInput := [][]byte{
		fillShare([]uint8{
			0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, // namespace id
			0x1,                // info byte
			0x0, 0x0, 0x2, 0x2, // 512 (unit) + 2 (unit length) = 514 sequence length
			0x0, 0x0, 0x0, 17, // reserved bytes
			128, 4, // unit length of transaction is 512
		}, 0xc), // data of transaction
		padShare(append([]uint8{
			0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, // namespace id
			0x0,                // info byte
			0x0, 0x0, 0x0, 0x0, // reserved bytes
		}, bytes.Repeat([]byte{0xc}, 19)..., // continuation data of transaction
		)),
	}
	largeTxData := []byte{128, 4}
	largeTxData = append(largeTxData, bytes.Repeat([]byte{0xc}, 512)...)

	largePfbTxInput := [][]byte{
		fillShare([]uint8{
			0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, // namespace id
			0x1,                // info byte
			0x0, 0x0, 0x2, 0x2, // 512 (unit) + 2 (unit length) = 514 sequence length
			0x0, 0x0, 0x0, 17, // reserved bytes
			128, 4, // unit length of transaction is 512
		}, 0xc), // data of transaction
		padShare(append([]uint8{
			0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, // namespace id
			0x0,                // info byte
			0x0, 0x0, 0x0, 0x0, // reserved bytes
		}, bytes.Repeat([]byte{0xc}, 19)..., // continuation data of transaction
		)),
	}
	largePfbTxData := []byte{128, 4}
	largePfbTxData = append(largePfbTxData, bytes.Repeat([]byte{0xc}, 512)...)

	rawDataWithMultipleSequences := [][]uint8{
		{0x0, 0x48, 0x75, 0x90, 0x2d, 0xb, 0x5a, 0xc7, 0xfa, 0x11, 0x6b, 0x67, 0xb1, 0x7a, 0x6b, 0x30, 0x81, 0x0, 0x0, 0x0, 0x0, 0x4, 0x2b, 0x78, 0xda, 0x8c, 0xd3, 0x6b, 0x37, 0xdb, 0x77, 0x0, 0x0, 0x60, 0x55, 0x44, 0x51, 0x23, 0xcb, 0xd1, 0xd, 0x71, 0x5b, 0xa2, 0x6d, 0x6a, 0x9b, 0xb5, 0x2a, 0x71, 0x19, 0x65, 0x95, 0xb8, 0x44, 0x8d, 0x92, 0x10, 0xd9, 0x11, 0x8c, 0x65, 0x55, 0x97, 0x6a, 0x59, 0xdd, 0x9b, 0x2e, 0x15, 0x35, 0x1a, 0x41, 0x47, 0xc7, 0x34, 0x11, 0x97, 0xa4, 0xd5, 0x4e, 0x95, 0xb8, 0xc5, 0xe, 0x45, 0x5d, 0xd2, 0x6a, 0xc9, 0x39, 0xe9, 0xd4, 0xa5, 0xee, 0x4a, 0x7a, 0x5a, 0xb, 0x41, 0x89, 0x6c, 0xa7, 0x67, 0xff, 0xbd, 0xff, 0x7d, 0x81, 0xe7, 0xdd, 0xd3, 0x46, 0xd4, 0xd8, 0xf6, 0xe1, 0xd6, 0xed, 0x94, 0x1c, 0x25, 0xe6, 0x5, 0x17, 0xe1, 0xfc, 0x5, 0xd7, 0x19, 0x89, 0x83, 0x65, 0xf6, 0xe5, 0x4, 0xd4, 0xd5, 0xad, 0xc0, 0xa4, 0xf9, 0xf0, 0x50, 0x26, 0x92, 0x8c, 0x3c, 0x70, 0x85, 0x3b, 0x88, 0x49, 0xc1, 0xdd, 0x63, 0x48, 0xa9, 0x28, 0x6d, 0x43, 0xe4, 0x93, 0xa2, 0xeb, 0xac, 0x56, 0xb5, 0xb0, 0xdc, 0x82, 0xd8, 0xa7, 0x5f, 0x53, 0xd3, 0x3b, 0x56, 0x27, 0x5a, 0xd4, 0x64, 0x7e, 0x1f, 0x8f, 0xb7, 0xea, 0xfe, 0x4f, 0xb, 0xe4, 0xae, 0xb9, 0x5d, 0x33, 0x57, 0xdf, 0xc, 0x3a, 0xeb, 0x83, 0x7b, 0x11, 0x46, 0x1b, 0xd, 0x14, 0x28, 0xfd, 0xf0, 0x46, 0x17, 0xa, 0xe3, 0x1e, 0xb9, 0xaa, 0x73, 0xb6, 0xc, 0xd2, 0xc1, 0x34, 0x1b, 0x48, 0xa3, 0xca, 0x96, 0x72, 0xb7, 0x3b, 0x7c, 0x83, 0x8f, 0x23, 0xee, 0xc8, 0x3a, 0xd, 0xc7, 0xb1, 0x79, 0x93, 0x1e, 0xa3, 0x2d, 0xcd, 0x7c, 0x51, 0x96, 0x4f, 0xa4, 0x17, 0x63, 0x25, 0x53, 0xb, 0x4c, 0x43, 0x41, 0x9a, 0xb6, 0x5, 0xe5, 0x67, 0x8e, 0x8e, 0x9, 0x9e, 0x9e, 0xd2, 0x35, 0xa4, 0x13, 0xb9, 0x20, 0xbb, 0x9d, 0xb8, 0x50, 0xb1, 0x73, 0x43, 0xc1, 0x22, 0x8a, 0xf3, 0xc5, 0x9a, 0xaf, 0x3b, 0x85, 0x60, 0x9a, 0x2d, 0xa4, 0xb9, 0x69, 0x4b, 0x65, 0xce, 0x70, 0x7b, 0xd4, 0x45, 0xce, 0xe7, 0xb7, 0x5c, 0x8b, 0xad, 0x79, 0x2e, 0x6d, 0x7, 0xc8, 0x93, 0x8d, 0xc9, 0xe7, 0xe3, 0x78, 0x53, 0x5f, 0x13, 0x34, 0x26, 0xa2, 0xc1, 0xb4, 0x23, 0x90, 0x16, 0x73, 0x79, 0x21, 0xc6, 0x3a, 0x12, 0x3d, 0xd8, 0xa3, 0xe1, 0x89, 0xc7, 0x63, 0xb9, 0x74, 0x84, 0xd2, 0x24, 0xcf, 0x2f, 0xeb, 0xf5, 0x31, 0x57, 0x57, 0xe6, 0x50, 0x31, 0xf5, 0xd9, 0x3a, 0x98, 0x86, 0x81, 0x34, 0x52, 0xb6, 0x6, 0xed, 0x10, 0x22, 0x99, 0xe4, 0x31, 0x51, 0xf2, 0xd3, 0xc1, 0x0, 0x4b, 0x3, 0xb6, 0xfc, 0x2f, 0xfb, 0xa6, 0xfe, 0x8, 0x17, 0xf9, 0x62, 0xff, 0x66, 0x58, 0x6a, 0x84, 0x1c, 0x4c, 0xb3, 0x83, 0x34, 0xdd, 0x9e, 0x52, 0x84, 0x22, 0x7b, 0x66, 0xb7, 0x5e, 0xfd, 0xe2, 0x99, 0x64, 0x2f, 0xe6, 0x8, 0xbf, 0x88, 0xf1, 0x95, 0xfb, 0x2c, 0x4c, 0x2b, 0xa8, 0x8a, 0x3c, 0x33, 0xc0, 0xcc, 0xd9, 0x1, 0xd3, 0xbe, 0x80, 0x34, 0x64, 0x87, 0xd7, 0x4a, 0xdb, 0xcb, 0x86, 0xbb, 0x48, 0xf3, 0x4c, 0xe5, 0x61, 0x7d, 0xef, 0x4b, 0x21, 0x5a, 0xe7, 0x2c, 0xd8, 0x9f, 0xd0, 0xa5, 0x1b, 0x91, 0x6a, 0x9f, 0xce, 0xf4, 0x89, 0xec, 0x7d, 0x5c, 0x7b, 0xf8, 0xd8, 0xa8, 0x34, 0xf1, 0x2e, 0xf9, 0x81, 0x3c, 0xad, 0xc8, 0x43, 0x52, 0x55, 0x91, 0x57, 0x4e, 0x1f, 0xd9, 0x87, 0xa4, 0x86, 0x88, 0x73, 0xd2, 0xb1, 0x76, 0x7b, 0x42, 0xa7, 0xf, 0x9a, 0x3d, 0xa4, 0xd9, 0x38, 0xaa, 0xac, 0x31, 0x4e, 0x1, 0xf5, 0x15, 0xb7, 0x87, 0xa8, 0xf4, 0x2e, 0xc1, 0x4b, 0xc9, 0x49, 0x4d, 0xbb, 0x7f, 0x56, 0xf6, 0x4f, 0x9d, 0x7d, 0x1c, 0xbd, 0xc3, 0x67, 0xd9, 0x52, 0xc0, 0xb4, 0xe3, 0x90, 0xf6, 0xc6, 0xed, 0xc7, 0xf7, 0xec, 0x75, 0x55, 0xbd, 0xa5, 0xd8, 0xa9, 0xdd, 0x25, 0x31, 0x78, 0x39, 0x54, 0xf4, 0x9b, 0xef, 0x40, 0x9d, 0x30, 0xb4, 0x35, 0xbc, 0x75, 0x79, 0xba, 0x5b, 0x2f, 0xd, 0x4c, 0x73, 0x80, 0x34, 0xbc, 0x57, 0x72, 0x96, 0x8a, 0x6c, 0xec, 0x50, 0x78, 0xb9, 0x2c, 0x70, 0x63, 0xc1, 0xe1, 0x9b, 0x2, 0x25, 0xc5, 0x76, 0xd8, 0x54, 0x97, 0x5a, 0x5e, 0x4a, 0xca, 0xd2, 0x33, 0x9b, 0xf, 0x2, 0xd3, 0x1c, 0x21, 0x4d, 0xb2, 0x8c, 0x72, 0x2c, 0xc0, 0xb6, 0x1b, 0x8, 0xf8, 0x8c, 0x8f, 0x7d, 0x1c, 0x59, 0xba, 0xe7, 0x97, 0xbd, 0xb9, 0xb6, 0xe3, 0xd3, 0xb9, 0xb5, 0xb7, 0x56, 0x99, 0x3c, 0xd2, 0x7c, 0x35, 0x98, 0x86, 0x83, 0x34, 0x85, 0xd5, 0xec, 0xa1, 0x3d, 0x74, 0xfe, 0xdb, 0x46, 0xcb, 0x94, 0x39, 0x15, 0x6c, 0x31, 0xe7, 0x5d, 0x65, 0x3f, 0x56, 0x14, 0xd2, 0x3, 0xeb, 0xc1, 0xc1, 0x2b, 0x7b, 0xf9, 0x71, 0xc6, 0x60, 0x9a, 0x33, 0xa4, 0xa1, 0x28, 0xad, 0x19, 0x14, 0xa3, 0xf0, 0x1b, 0x17, 0x37, 0xf1, 0x30, 0xb8, 0xb1, 0xdc, 0xbf, 0x77, 0x69, 0x77, 0xd3, 0xf4, 0x97, 0x35, 0xfe, 0x99, 0xe1, 0x8f, 0x9e, 0xef, 0x7f, 0xfa, 0x1d, 0xf, 0x4c, 0x73, 0x85, 0x34, 0x8c, 0xb1, 0xb, 0xcd, 0xe5, 0xca, 0x31, 0xe1, 0xee, 0xf0, 0x54, 0x7, 0xf9, 0xcf, 0x34, 0xf8, 0xdb, 0x2c, 0x5d, 0x42, 0x3c, 0x2f, 0x53, 0x7f, 0xec, 0xef, 0x13, 0x19, 0xcd, 0x63, 0x9f, 0xea, 0x68, 0x72, 0x13, 0xc2, 0xea, 0x39, 0x28, 0xd3, 0xa1, 0xda, 0x57, 0x4e, 0x73, 0x7d, 0xb1, 0x26, 0xee, 0xb9, 0x41, 0xa, 0x24, 0xac, 0xc0, 0x6e, 0x58, 0xf0, 0x6d, 0x89, 0x67, 0xc0, 0xe9, 0xd5, 0x93, 0xec, 0xf, 0x9a, 0x1b, 0xa4, 0x99, 0x3c, 0xcf, 0x99, 0xfd, 0xc3, 0xcf, 0xc6, 0xac, 0xe1, 0x2, 0x7a, 0xd5, 0xad, 0x23, 0xb6, 0x21, 0x3a, 0x71, 0xf2, 0xc4, 0x43, 0x91, 0xa7, 0x32, 0x38, 0xce, 0x4f, 0x3e, 0x59, 0x5c, 0x7c, 0x14, 0x4c, 0x3b, 0x5, 0x69, 0xb9, 0xc1, 0x28, 0x4c, 0xa9, 0x52, 0xb0, 0x72, 0xff, 0x52, 0x2c, 0xdd, 0xe6, 0x2a, 0x47, 0x21, 0xdb, 0x99, 0x75, 0xb6, 0xf4, 0xa, 0xa8, 0x78, 0xd7, 0x7c, 0xf0, 0xce, 0x9c, 0xba, 0x31, 0x9, 0x4c, 0xf3, 0x84, 0x34, 0x42, 0x4c, 0xed, 0xcc, 0x88, 0xf7, 0x2e, 0xae, 0x85, 0x31, 0x70, 0xb3, 0xc5, 0xb, 0xd5, 0x6b, 0x4e, 0x8c, 0x15, 0x8e, 0x3e, 0x7e, 0x22, 0x58, 0x22, 0x20, 0x39, 0x34, 0xcc, 0xe2, 0x1e, 0x98, 0x76, 0xfa, 0xff, 0x59, 0xed, 0xc3, 0xbc, 0x5f, 0xcd, 0xfd, 0xc3, 0xef, 0x8d, 0x9b, 0x54, 0xd3, 0xb2, 0x93, 0x32, 0xcc, 0x56, 0x1f, 0xdc, 0x8f, 0x47, 0x33, 0xd7, 0xcb, 0x8a, 0x1e, 0xc9, 0x11, 0x23, 0x6, 0x34, 0x30, 0xd, 0xf, 0x69, 0xd5, 0x9c, 0x4a, 0x69, 0x54, 0x93, 0xa5, 0x48, 0x24, 0xd5, 0x1f, 0x5c, 0xab, 0xc7, 0xec, 0xc9, 0xb6, 0x52, 0x79, 0x86, 0x58, 0x4f, 0x7e, 0x7c, 0x55, 0xa1, 0xa, 0x9b, 0xc6, 0x73, 0x4, 0xd3, 0xbc, 0x21, 0xad, 0xa7, 0x2b, 0x8e, 0xd2, 0x4c, 0xf7, 0xed, 0xdb, 0x16, 0xcf, 0x28, 0x16, 0xe1, 0xaa, 0xf9, 0xa8, 0x4, 0x9c, 0x53, 0x52, 0xf2, 0x46, 0x2, 0x9, 0x5d, 0xfa, 0x99, 0x1e, 0x4c, 0x6c, 0x8, 0xa6, 0xf9, 0x42, 0x9a, 0x88, 0xcc, 0x9, 0x99, 0xe8, 0x3e, 0xcc, 0x32, 0x2e, 0x95, 0xcc, 0x3d, 0x6c, 0x15, 0x6a, 0x55, 0x9d, 0xb, 0x7a, 0xf3, 0x94, 0x60, 0xd4, 0x84, 0xe8, 0x40, 0xa7, 0x26, 0x7c, 0xf9, 0x7b, 0x14, 0x98, 0x46, 0x84, 0xb4, 0xe9, 0x3a, 0xab, 0xf7, 0x3c, 0xf7, 0x9a, 0x6b, 0x6c, 0xf, 0x25, 0x8b, 0xd4, 0x99, 0x3f, 0x75, 0x8a, 0xad, 0x31, 0xfb, 0xca, 0x63, 0x20, 0x32, 0x62, 0x41, 0xf2, 0x83, 0x72, 0x4e, 0x8f, 0xa, 0xa6, 0x9d, 0xe9, 0xfe, 0x37, 0x0, 0x0, 0xff, 0xff, 0x1b, 0xd5, 0x90, 0x61, 0x1},
		{},
		{0x0, 0x47, 0xde, 0x6f, 0x57, 0xba, 0x79, 0x13, 0x6d, 0xdc, 0xa6, 0x82, 0x64, 0x3d, 0x10, 0x65, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0xd6, 0x78, 0xda, 0xda, 0xe1, 0xc7, 0xf0, 0xc3, 0x7b, 0xc1, 0xeb, 0xd9, 0x9d, 0x47, 0x96, 0x78, 0xa7, 0xc4, 0xfd, 0x3b, 0xf5, 0xe1, 0x44, 0xc5, 0xc9, 0x2f, 0x56, 0x37, 0x99, 0x7c, 0x17, 0xc9, 0x9b, 0x98, 0xfd, 0xcc, 0x97, 0x51, 0x59, 0x39, 0xbd, 0x74, 0xed, 0xf2, 0x26, 0x15, 0xbd, 0x5, 0xc7, 0xd6, 0xf3, 0x7e, 0x91, 0x39, 0x35, 0x2f, 0xf8, 0x85, 0xef, 0xb2, 0x1a, 0x5b, 0x4d, 0xab, 0xf9, 0xbf, 0x6b, 0x8a, 0x5f, 0xbd, 0xbd, 0x55, 0xb3, 0xe3, 0xd2, 0xa1, 0x8d, 0x6, 0xc7, 0x3e, 0x2c, 0xa8, 0x6f, 0x49, 0xc9, 0x75, 0xd3, 0x3b, 0x0, 0x31, 0x6f, 0xa6, 0xfc, 0x66, 0x57, 0x27, 0xef, 0x35, 0xdb, 0x2a, 0xdf, 0x7d, 0x10, 0xa, 0x15, 0x2f, 0x66, 0x2a, 0x6e, 0xdc, 0x3a, 0xa1, 0xb2, 0x49, 0x7f, 0x42, 0x8f, 0x98, 0xcc, 0x55, 0xfe, 0xf5, 0xaf, 0xf6, 0x35, 0xa9, 0xe8, 0x2f, 0x58, 0xf2, 0x35, 0xe6, 0x7c, 0x9f, 0x5b, 0x42, 0xe5, 0xb5, 0x3f, 0xdd, 0x67, 0xdb, 0xb4, 0x9a, 0xab, 0xad, 0x6f, 0x74, 0x9e, 0x68, 0x99, 0xf8, 0xbb, 0xc3, 0xf0, 0x3a, 0xa7, 0xe8, 0x8f, 0x88, 0x3d, 0xaf, 0x40, 0xe6, 0x19, 0x40, 0xcd, 0x33, 0xdc, 0xff, 0x77, 0x76, 0x8f, 0xc9, 0x43, 0x77, 0xfe, 0xc9, 0x7e, 0x95, 0x6d, 0x9d, 0x99, 0x7, 0x9c, 0x7f, 0x4e, 0x3e, 0xe6, 0x7c, 0xb2, 0x63, 0x8f, 0xf7, 0x9f, 0xdc, 0xe9, 0xca, 0x37, 0x54, 0xa7, 0x13, 0x6b, 0x9e, 0x11, 0xd4, 0xbc, 0xba, 0xba, 0x77, 0xd7, 0x1c, 0xb6, 0x9c, 0xdd, 0xa7, 0x25, 0x59, 0x7b, 0xfa, 0xdf, 0xf2, 0xc9, 0x27, 0x6a, 0xe2, 0x59, 0x5a, 0xb, 0x73, 0x96, 0x26, 0xc5, 0x2c, 0x3f, 0x58, 0x91, 0xd0, 0xed, 0xb0, 0x9f, 0x58, 0xf3, 0x4c, 0xa0, 0xe6, 0x6d, 0x38, 0x6c, 0x73, 0xed, 0xd2, 0x86, 0xbb, 0x7b, 0xa, 0x44, 0xe3, 0x2a, 0x2, 0x3a, 0xcc, 0x2b, 0x7c, 0x67, 0x9f, 0x7b, 0x77, 0x7b, 0x77, 0xad, 0x7f, 0x8e, 0xe2, 0x96, 0xe5, 0xb, 0xae, 0x6b, 0x31, 0x10, 0x6b, 0x9e, 0x19, 0xd4, 0xbc, 0xde, 0xfb, 0x2a, 0x4c, 0x2f, 0xf8, 0x5f, 0x9e, 0xc8, 0xd7, 0xb9, 0xd1, 0xa7, 0x10, 0xa2, 0xf1, 0x7d, 0x65, 0x17, 0xdf, 0xcc, 0x93, 0x85, 0x79, 0xb7, 0x16, 0xf2, 0x6, 0xaf, 0xd1, 0xfa, 0x61, 0xb6, 0x91, 0x58, 0xf3, 0x2c, 0xa0, 0xe6, 0xfd, 0xef, 0x35, 0x90, 0xff, 0xf0, 0xef, 0xe9, 0xfd, 0xb8, 0xfb, 0x1f, 0xd9, 0x22, 0x8e, 0xdf, 0xb7, 0xf7, 0xd4, 0x6c, 0x7b, 0xd9, 0x2a, 0x13, 0x15, 0xa1, 0xb3, 0x74, 0x71, 0x79, 0xe4, 0xab, 0x2f, 0x8b, 0x89, 0x35, 0xcf, 0xa, 0x6a, 0x9e, 0x5, 0x77, 0xa7, 0x6d, 0xf8, 0xe3, 0x23, 0x2f, 0x56, 0x3f, 0xd3, 0x78, 0x2d, 0xe5, 0x32, 0x71, 0xe9, 0xad, 0x27, 0x53, 0xd5, 0x82, 0x5f, 0x18, 0x78, 0xf2, 0xcf, 0xe2, 0xeb, 0x9d, 0x9e, 0xaa, 0xdc, 0x4a, 0xac, 0x79, 0x36, 0x50, 0xf3, 0xc4, 0xbe, 0x5b, 0xde, 0xb1, 0x7e, 0x3d, 0x45, 0xd9, 0xfd, 0x9e, 0x51, 0x4f, 0xf2, 0xd7, 0xa0, 0xab, 0x1d, 0xc7, 0xe7, 0xbd, 0xfd, 0xea, 0x74, 0xeb, 0x65, 0x90, 0x75, 0xc7, 0xf3, 0xaf, 0xa9, 0x2b, 0x9c, 0x9b, 0x54, 0xc, 0x16, 0xfc, 0x3a, 0xf5, 0xa4, 0x60, 0x99, 0xcc, 0xae, 0x50, 0xb5, 0x2b, 0x47, 0xb5, 0xbe, 0xac, 0x54, 0x5b, 0x90, 0xb2, 0x28, 0x38, 0x7e, 0xd6, 0x6a, 0xd5, 0xae, 0x3a, 0xa9, 0x47, 0x53, 0xee, 0x6d, 0xe1, 0x4f, 0x7, 0x99, 0x67, 0x7, 0x35, 0x6f, 0x92, 0xe9, 0xe1, 0x5d, 0x61, 0x73, 0x5e, 0x5c, 0xfa, 0xdb, 0x72, 0x65, 0x52, 0xe0, 0x9a, 0x3d, 0xcc, 0x6f, 0xf6, 0xbe, 0xbb, 0x26, 0x7b, 0x4e, 0x6c, 0xd6, 0xd3, 0x1f, 0x5b, 0xa2, 0xb, 0x2c, 0x7d, 0xe6, 0x12, 0x6b, 0x9e, 0x3, 0xd4, 0xbc, 0xb6, 0x46, 0xbe, 0x3b, 0xfc, 0xc5, 0xc5, 0x25, 0xf3, 0xea, 0x1a, 0xa7, 0x66, 0x99, 0xb6, 0xaa, 0xdd, 0xfd, 0xde, 0xc1, 0x9a, 0x97, 0xbf, 0x78, 0xf7, 0x44, 0x13, 0x8d, 0x7a, 0xf1, 0xcd, 0xff, 0x3f, 0x12, 0x6b, 0x9e, 0x13, 0xd4, 0xbc, 0xc8, 0x36, 0x49, 0xab, 0xe3, 0xfa, 0x7e, 0x2f, 0xbc, 0x5e, 0x74, 0x56, 0xee, 0x7f, 0xf2, 0xcc, 0xf2, 0x97, 0xe2, 0x7, 0xcb, 0x90, 0xba, 0xec, 0x98, 0xe3, 0xee, 0xd, 0x8b, 0x8a, 0x5a, 0xeb, 0x35, 0x89, 0x35, 0xcf, 0x5, 0x6a, 0xde, 0x9b, 0xcf, 0x7f, 0xdf, 0xb9, 0x7d, 0x7a, 0x3c, 0x53, 0xfe, 0xcd, 0x1c, 0x65, 0x87, 0xb9, 0x2b, 0xe2, 0xd, 0xea, 0x1e, 0xaa, 0xcc, 0x5d, 0xfb, 0xef, 0xfa, 0xe9, 0xf5, 0xd9, 0xef, 0x54, 0x1a, 0xe6, 0x5d, 0x22, 0xd6, 0x3c, 0x37, 0xa8, 0x79, 0xc9, 0x6f, 0xd7, 0x66, 0x5b, 0x59, 0xdd, 0xce, 0xb, 0x74, 0x15, 0xdf, 0x94, 0x99, 0x79, 0x98, 0xa3, 0x6b, 0xda, 0x86, 0x65, 0xcb, 0xbf, 0x6e, 0x67, 0xc9, 0xb6, 0x37, 0x38, 0x6b, 0x31, 0xff, 0x61, 0x2f, 0xb1, 0xe6, 0x79, 0x40, 0xcd, 0x63, 0xbb, 0xfe, 0x8f, 0xcb, 0xc4, 0xf7, 0x3e, 0x5f, 0x50, 0xd4, 0x13, 0xcd, 0xbd, 0xf6, 0x15, 0x13, 0xe5, 0xb6, 0x17, 0x5a, 0xce, 0x9c, 0xf8, 0x50, 0x61, 0x5a, 0xe3, 0xc2, 0xe9, 0x3e, 0x6c, 0x3c, 0xcb, 0x88, 0x35, 0xcf, 0xeb, 0x0, 0x20, 0x0, 0x0, 0xff, 0xff, 0x37, 0xcf, 0x6e, 0x78, 0x1},
	}

	testCases := []testCase{
		{
			name:    "empty",
			input:   [][]byte{},
			want:    nil,
			wantErr: false,
		},
		{
			name: "returns an error when shares contain two different namespaces",
			input: [][]byte{
				{0, 0, 0, 0, 0, 0, 0, 1},
				{0, 0, 0, 0, 0, 0, 0, 2},
			},
			want:    nil,
			wantErr: true,
		},
		{
			name:    "returns raw data of a single tx share",
			input:   [][]byte{smallTxInput},
			want:    [][]byte{smallTxData},
			wantErr: false,
		},
		{
			name:    "returns raw data of a large tx that spans two shares",
			input:   largeTxInput,
			want:    [][]byte{largeTxData},
			wantErr: false,
		},
		{
			name:    "returns raw data of a large PFB tx that spans two shares",
			input:   largePfbTxInput,
			want:    [][]byte{largePfbTxData},
			wantErr: false,
		},
		{
			name:    "returns raw data for multiple sequences",
			input:   sharesWithMultipleSequences(t),
			want:    rawDataWithMultipleSequences,
			wantErr: false,
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			got, err := dataFromShares(tc.input)
			if tc.wantErr {
				assert.Error(t, err)
				return
			}
			assert.NoError(t, err)
			assert.Equal(t, tc.want, got)
		})
	}
}

// padShare returns a share padded with trailing zeros.
func padShare(share []byte) (paddedShare []byte) {
	return fillShare(share, 0)
}

// fillShare returns a share filled with filler so that the share length
// is equal to appconsts.ShareSize.
func fillShare(share []byte, filler byte) (paddedShare []byte) {
	return append(share, bytes.Repeat([]byte{filler}, appconsts.ShareSize-len(share))...)
}

// sharesWithMultipleSequences is the raw share data from Blockspace Race block
// height 559108 namespace e8e5f679bf7116cb.
// https://github.com/celestiaorg/celestia-app/issues/1816
func sharesWithMultipleSequences(t *testing.T) [][]byte {
	sharesBase64 := []string{
		"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",
	}

	rawShares := [][]byte{}
	for _, share := range sharesBase64 {
		rawShare, err := base64.StdEncoding.DecodeString(share)
		assert.NoError(t, err)
		rawShares = append(rawShares, rawShare)
	}
	return rawShares
}
