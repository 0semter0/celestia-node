// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/celestiaorg/celestia-node/api/rpc/client (interfaces: API)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	math "cosmossdk.io/math"
	da "github.com/celestiaorg/celestia-app/pkg/da"
	types "github.com/cosmos/cosmos-sdk/types"
	types0 "github.com/cosmos/cosmos-sdk/x/staking/types"
	gomock "github.com/golang/mock/gomock"
	types1 "github.com/tendermint/tendermint/types"

	das "github.com/celestiaorg/celestia-node/das"
	fraud "github.com/celestiaorg/celestia-node/fraud"
	header "github.com/celestiaorg/celestia-node/header"
	namespace "github.com/celestiaorg/nmt/namespace"
)

// MockAPI is a mock of API interface.
type MockAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAPIMockRecorder
}

// MockAPIMockRecorder is the mock recorder for MockAPI.
type MockAPIMockRecorder struct {
	mock *MockAPI
}

// NewMockAPI creates a new mock instance.
func NewMockAPI(ctrl *gomock.Controller) *MockAPI {
	mock := &MockAPI{ctrl: ctrl}
	mock.recorder = &MockAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPI) EXPECT() *MockAPIMockRecorder {
	return m.recorder
}

// Balance mocks base method.
func (m *MockAPI) Balance(arg0 context.Context) (*types.Coin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Balance", arg0)
	ret0, _ := ret[0].(*types.Coin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Balance indicates an expected call of Balance.
func (mr *MockAPIMockRecorder) Balance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Balance", reflect.TypeOf((*MockAPI)(nil).Balance), arg0)
}

// BalanceForAddress mocks base method.
func (m *MockAPI) BalanceForAddress(arg0 context.Context, arg1 types.Address) (*types.Coin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BalanceForAddress", arg0, arg1)
	ret0, _ := ret[0].(*types.Coin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BalanceForAddress indicates an expected call of BalanceForAddress.
func (mr *MockAPIMockRecorder) BalanceForAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BalanceForAddress", reflect.TypeOf((*MockAPI)(nil).BalanceForAddress), arg0, arg1)
}

// BeginRedelegate mocks base method.
func (m *MockAPI) BeginRedelegate(arg0 context.Context, arg1, arg2 types.ValAddress, arg3 math.Int, arg4 uint64) (*types.TxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginRedelegate", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*types.TxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginRedelegate indicates an expected call of BeginRedelegate.
func (mr *MockAPIMockRecorder) BeginRedelegate(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginRedelegate", reflect.TypeOf((*MockAPI)(nil).BeginRedelegate), arg0, arg1, arg2, arg3, arg4)
}

// Broadcast mocks base method.
func (m *MockAPI) Broadcast(arg0 context.Context, arg1 fraud.Proof) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Broadcast", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Broadcast indicates an expected call of Broadcast.
func (mr *MockAPIMockRecorder) Broadcast(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Broadcast", reflect.TypeOf((*MockAPI)(nil).Broadcast), arg0, arg1)
}

// CancelUnbondingDelegation mocks base method.
func (m *MockAPI) CancelUnbondingDelegation(arg0 context.Context, arg1 types.ValAddress, arg2, arg3 math.Int, arg4 uint64) (*types.TxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelUnbondingDelegation", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*types.TxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelUnbondingDelegation indicates an expected call of CancelUnbondingDelegation.
func (mr *MockAPIMockRecorder) CancelUnbondingDelegation(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelUnbondingDelegation", reflect.TypeOf((*MockAPI)(nil).CancelUnbondingDelegation), arg0, arg1, arg2, arg3, arg4)
}

// Delegate mocks base method.
func (m *MockAPI) Delegate(arg0 context.Context, arg1 types.ValAddress, arg2 math.Int, arg3 uint64) (*types.TxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delegate", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*types.TxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delegate indicates an expected call of Delegate.
func (mr *MockAPIMockRecorder) Delegate(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delegate", reflect.TypeOf((*MockAPI)(nil).Delegate), arg0, arg1, arg2, arg3)
}

// Get mocks base method.
func (m *MockAPI) Get(arg0 context.Context, arg1 fraud.ProofType) ([]fraud.Proof, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].([]fraud.Proof)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAPIMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAPI)(nil).Get), arg0, arg1)
}

// GetByHeight mocks base method.
func (m *MockAPI) GetByHeight(arg0 context.Context, arg1 uint64) (*header.ExtendedHeader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByHeight", arg0, arg1)
	ret0, _ := ret[0].(*header.ExtendedHeader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByHeight indicates an expected call of GetByHeight.
func (mr *MockAPIMockRecorder) GetByHeight(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByHeight", reflect.TypeOf((*MockAPI)(nil).GetByHeight), arg0, arg1)
}

// GetShare mocks base method.
func (m *MockAPI) GetShare(arg0 context.Context, arg1 *da.DataAvailabilityHeader, arg2, arg3 int) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShare", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShare indicates an expected call of GetShare.
func (mr *MockAPIMockRecorder) GetShare(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShare", reflect.TypeOf((*MockAPI)(nil).GetShare), arg0, arg1, arg2, arg3)
}

// GetShares mocks base method.
func (m *MockAPI) GetShares(arg0 context.Context, arg1 *da.DataAvailabilityHeader) ([][][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShares", arg0, arg1)
	ret0, _ := ret[0].([][][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShares indicates an expected call of GetShares.
func (mr *MockAPIMockRecorder) GetShares(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShares", reflect.TypeOf((*MockAPI)(nil).GetShares), arg0, arg1)
}

// GetSharesByNamespace mocks base method.
func (m *MockAPI) GetSharesByNamespace(arg0 context.Context, arg1 *da.DataAvailabilityHeader, arg2 namespace.ID) ([][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSharesByNamespace", arg0, arg1, arg2)
	ret0, _ := ret[0].([][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSharesByNamespace indicates an expected call of GetSharesByNamespace.
func (mr *MockAPIMockRecorder) GetSharesByNamespace(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSharesByNamespace", reflect.TypeOf((*MockAPI)(nil).GetSharesByNamespace), arg0, arg1, arg2)
}

// Head mocks base method.
func (m *MockAPI) Head(arg0 context.Context) (*header.ExtendedHeader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Head", arg0)
	ret0, _ := ret[0].(*header.ExtendedHeader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Head indicates an expected call of Head.
func (mr *MockAPIMockRecorder) Head(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Head", reflect.TypeOf((*MockAPI)(nil).Head), arg0)
}

// IsStopped mocks base method.
func (m *MockAPI) IsStopped() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsStopped")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsStopped indicates an expected call of IsStopped.
func (mr *MockAPIMockRecorder) IsStopped() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsStopped", reflect.TypeOf((*MockAPI)(nil).IsStopped))
}

// IsSyncing mocks base method.
func (m *MockAPI) IsSyncing() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSyncing")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSyncing indicates an expected call of IsSyncing.
func (mr *MockAPIMockRecorder) IsSyncing() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSyncing", reflect.TypeOf((*MockAPI)(nil).IsSyncing))
}

// ProbabilityOfAvailability mocks base method.
func (m *MockAPI) ProbabilityOfAvailability() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProbabilityOfAvailability")
	ret0, _ := ret[0].(float64)
	return ret0
}

// ProbabilityOfAvailability indicates an expected call of ProbabilityOfAvailability.
func (mr *MockAPIMockRecorder) ProbabilityOfAvailability() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProbabilityOfAvailability", reflect.TypeOf((*MockAPI)(nil).ProbabilityOfAvailability))
}

// QueryDelegation mocks base method.
func (m *MockAPI) QueryDelegation(arg0 context.Context, arg1 types.ValAddress) (*types0.QueryDelegationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryDelegation", arg0, arg1)
	ret0, _ := ret[0].(*types0.QueryDelegationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryDelegation indicates an expected call of QueryDelegation.
func (mr *MockAPIMockRecorder) QueryDelegation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryDelegation", reflect.TypeOf((*MockAPI)(nil).QueryDelegation), arg0, arg1)
}

// QueryRedelegations mocks base method.
func (m *MockAPI) QueryRedelegations(arg0 context.Context, arg1, arg2 types.ValAddress) (*types0.QueryRedelegationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryRedelegations", arg0, arg1, arg2)
	ret0, _ := ret[0].(*types0.QueryRedelegationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryRedelegations indicates an expected call of QueryRedelegations.
func (mr *MockAPIMockRecorder) QueryRedelegations(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRedelegations", reflect.TypeOf((*MockAPI)(nil).QueryRedelegations), arg0, arg1, arg2)
}

// QueryUnbonding mocks base method.
func (m *MockAPI) QueryUnbonding(arg0 context.Context, arg1 types.ValAddress) (*types0.QueryUnbondingDelegationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryUnbonding", arg0, arg1)
	ret0, _ := ret[0].(*types0.QueryUnbondingDelegationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryUnbonding indicates an expected call of QueryUnbonding.
func (mr *MockAPIMockRecorder) QueryUnbonding(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryUnbonding", reflect.TypeOf((*MockAPI)(nil).QueryUnbonding), arg0, arg1)
}

// SamplingStats mocks base method.
func (m *MockAPI) SamplingStats(arg0 context.Context) (das.SamplingStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SamplingStats", arg0)
	ret0, _ := ret[0].(das.SamplingStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SamplingStats indicates an expected call of SamplingStats.
func (mr *MockAPIMockRecorder) SamplingStats(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SamplingStats", reflect.TypeOf((*MockAPI)(nil).SamplingStats), arg0)
}

// SharesAvailable mocks base method.
func (m *MockAPI) SharesAvailable(arg0 context.Context, arg1 *da.DataAvailabilityHeader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SharesAvailable", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SharesAvailable indicates an expected call of SharesAvailable.
func (mr *MockAPIMockRecorder) SharesAvailable(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SharesAvailable", reflect.TypeOf((*MockAPI)(nil).SharesAvailable), arg0, arg1)
}

// SubmitPayForData mocks base method.
func (m *MockAPI) SubmitPayForData(arg0 context.Context, arg1 namespace.ID, arg2 []byte, arg3 uint64) (*types.TxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitPayForData", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*types.TxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitPayForData indicates an expected call of SubmitPayForData.
func (mr *MockAPIMockRecorder) SubmitPayForData(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitPayForData", reflect.TypeOf((*MockAPI)(nil).SubmitPayForData), arg0, arg1, arg2, arg3)
}

// SubmitTx mocks base method.
func (m *MockAPI) SubmitTx(arg0 context.Context, arg1 types1.Tx) (*types.TxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitTx", arg0, arg1)
	ret0, _ := ret[0].(*types.TxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitTx indicates an expected call of SubmitTx.
func (mr *MockAPIMockRecorder) SubmitTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitTx", reflect.TypeOf((*MockAPI)(nil).SubmitTx), arg0, arg1)
}

// Subscribe mocks base method.
func (m *MockAPI) Subscribe(arg0 fraud.ProofType) (fraud.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", arg0)
	ret0, _ := ret[0].(fraud.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockAPIMockRecorder) Subscribe(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockAPI)(nil).Subscribe), arg0)
}

// Transfer mocks base method.
func (m *MockAPI) Transfer(arg0 context.Context, arg1 types.AccAddress, arg2 math.Int, arg3 uint64) (*types.TxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*types.TxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transfer indicates an expected call of Transfer.
func (mr *MockAPIMockRecorder) Transfer(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockAPI)(nil).Transfer), arg0, arg1, arg2, arg3)
}

// Undelegate mocks base method.
func (m *MockAPI) Undelegate(arg0 context.Context, arg1 types.ValAddress, arg2 math.Int, arg3 uint64) (*types.TxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Undelegate", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*types.TxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Undelegate indicates an expected call of Undelegate.
func (mr *MockAPIMockRecorder) Undelegate(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Undelegate", reflect.TypeOf((*MockAPI)(nil).Undelegate), arg0, arg1, arg2, arg3)
}
